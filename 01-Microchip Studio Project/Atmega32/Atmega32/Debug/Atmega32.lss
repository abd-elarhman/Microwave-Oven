
Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  000016ae  00001742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008001ca  008001ca  000018ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040e9  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001073  00000000  00000000  00005d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cac  00000000  00000000  00006dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a74  00000000  00000000  00008a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a97  00000000  00000000  000094cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d2e  00000000  00000000  0000af63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000dc91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 af 03 	jmp	0x75e	; 0x75e <__vector_1>
       8:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__vector_2>
       c:	0c 94 01 04 	jmp	0x802	; 0x802 <__vector_3>
      10:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_4>
      14:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_5>
      18:	0c 94 34 03 	jmp	0x668	; 0x668 <__vector_6>
      1c:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__vector_7>
      20:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_8>
      24:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_9>
      28:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_10>
      2c:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	8e 00       	.word	0x008e	; ????
      56:	9b 00       	.word	0x009b	; ????
      58:	a8 00       	.word	0x00a8	; ????
      5a:	b5 00       	.word	0x00b5	; ????
      5c:	c2 00       	.word	0x00c2	; ????
      5e:	cf 00       	.word	0x00cf	; ????
      60:	dc 00       	.word	0x00dc	; ????
      62:	e9 00       	.word	0x00e9	; ????
      64:	f6 00       	.word	0x00f6	; ????
      66:	03 01       	movw	r0, r6
      68:	10 01       	movw	r2, r0
      6a:	1d 01       	movw	r2, r26
      6c:	2a 01       	movw	r4, r20
      6e:	37 01       	movw	r6, r14
      70:	44 01       	movw	r8, r8

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	11 e0       	ldi	r17, 0x01	; 1
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	ee ea       	ldi	r30, 0xAE	; 174
      86:	f6 e1       	ldi	r31, 0x16	; 22
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	aa 3c       	cpi	r26, 0xCA	; 202
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	21 e0       	ldi	r18, 0x01	; 1
      96:	aa ec       	ldi	r26, 0xCA	; 202
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a9 3e       	cpi	r26, 0xE9	; 233
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <main>
      a8:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <TIMER_setTimer_Mode>:
 * 
 * @param LocalPtr Pointer to the callback function.
 */
void TIMER2_COMP_SetCallBack(void (*LocalPtr)(void))
{
	TIMER2_COMP_Fptr = LocalPtr;
      b0:	81 30       	cpi	r24, 0x01	; 1
      b2:	49 f1       	breq	.+82     	; 0x106 <TIMER_setTimer_Mode+0x56>
      b4:	20 f0       	brcs	.+8      	; 0xbe <TIMER_setTimer_Mode+0xe>
      b6:	82 30       	cpi	r24, 0x02	; 2
      b8:	09 f4       	brne	.+2      	; 0xbc <TIMER_setTimer_Mode+0xc>
      ba:	f3 c0       	rjmp	.+486    	; 0x2a2 <TIMER_setTimer_Mode+0x1f2>
      bc:	08 95       	ret
      be:	61 30       	cpi	r22, 0x01	; 1
      c0:	69 f0       	breq	.+26     	; 0xdc <TIMER_setTimer_Mode+0x2c>
      c2:	28 f0       	brcs	.+10     	; 0xce <TIMER_setTimer_Mode+0x1e>
      c4:	64 30       	cpi	r22, 0x04	; 4
      c6:	89 f0       	breq	.+34     	; 0xea <TIMER_setTimer_Mode+0x3a>
      c8:	65 30       	cpi	r22, 0x05	; 5
      ca:	b1 f0       	breq	.+44     	; 0xf8 <TIMER_setTimer_Mode+0x48>
      cc:	08 95       	ret
      ce:	83 b7       	in	r24, 0x33	; 51
      d0:	8f 7b       	andi	r24, 0xBF	; 191
      d2:	83 bf       	out	0x33, r24	; 51
      d4:	83 b7       	in	r24, 0x33	; 51
      d6:	87 7f       	andi	r24, 0xF7	; 247
      d8:	83 bf       	out	0x33, r24	; 51
      da:	08 95       	ret
      dc:	83 b7       	in	r24, 0x33	; 51
      de:	80 64       	ori	r24, 0x40	; 64
      e0:	83 bf       	out	0x33, r24	; 51
      e2:	83 b7       	in	r24, 0x33	; 51
      e4:	87 7f       	andi	r24, 0xF7	; 247
      e6:	83 bf       	out	0x33, r24	; 51
      e8:	08 95       	ret
      ea:	83 b7       	in	r24, 0x33	; 51
      ec:	8f 7b       	andi	r24, 0xBF	; 191
      ee:	83 bf       	out	0x33, r24	; 51
      f0:	83 b7       	in	r24, 0x33	; 51
      f2:	88 60       	ori	r24, 0x08	; 8
      f4:	83 bf       	out	0x33, r24	; 51
      f6:	08 95       	ret
      f8:	83 b7       	in	r24, 0x33	; 51
      fa:	80 64       	ori	r24, 0x40	; 64
      fc:	83 bf       	out	0x33, r24	; 51
      fe:	83 b7       	in	r24, 0x33	; 51
     100:	88 60       	ori	r24, 0x08	; 8
     102:	83 bf       	out	0x33, r24	; 51
     104:	08 95       	ret
     106:	86 2f       	mov	r24, r22
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	8f 30       	cpi	r24, 0x0F	; 15
     10c:	91 05       	cpc	r25, r1
     10e:	08 f0       	brcs	.+2      	; 0x112 <TIMER_setTimer_Mode+0x62>
     110:	eb c0       	rjmp	.+470    	; 0x2e8 <TIMER_setTimer_Mode+0x238>
     112:	fc 01       	movw	r30, r24
     114:	e6 5d       	subi	r30, 0xD6	; 214
     116:	ff 4f       	sbci	r31, 0xFF	; 255
     118:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <__tablejump2__>
     11c:	8f b5       	in	r24, 0x2f	; 47
     11e:	8e 7f       	andi	r24, 0xFE	; 254
     120:	8f bd       	out	0x2f, r24	; 47
     122:	8f b5       	in	r24, 0x2f	; 47
     124:	8d 7f       	andi	r24, 0xFD	; 253
     126:	8f bd       	out	0x2f, r24	; 47
     128:	8e b5       	in	r24, 0x2e	; 46
     12a:	87 7f       	andi	r24, 0xF7	; 247
     12c:	8e bd       	out	0x2e, r24	; 46
     12e:	8e b5       	in	r24, 0x2e	; 46
     130:	8f 7e       	andi	r24, 0xEF	; 239
     132:	8e bd       	out	0x2e, r24	; 46
     134:	08 95       	ret
     136:	8f b5       	in	r24, 0x2f	; 47
     138:	81 60       	ori	r24, 0x01	; 1
     13a:	8f bd       	out	0x2f, r24	; 47
     13c:	8f b5       	in	r24, 0x2f	; 47
     13e:	8d 7f       	andi	r24, 0xFD	; 253
     140:	8f bd       	out	0x2f, r24	; 47
     142:	8e b5       	in	r24, 0x2e	; 46
     144:	87 7f       	andi	r24, 0xF7	; 247
     146:	8e bd       	out	0x2e, r24	; 46
     148:	8e b5       	in	r24, 0x2e	; 46
     14a:	8f 7e       	andi	r24, 0xEF	; 239
     14c:	8e bd       	out	0x2e, r24	; 46
     14e:	08 95       	ret
     150:	8f b5       	in	r24, 0x2f	; 47
     152:	8e 7f       	andi	r24, 0xFE	; 254
     154:	8f bd       	out	0x2f, r24	; 47
     156:	8f b5       	in	r24, 0x2f	; 47
     158:	82 60       	ori	r24, 0x02	; 2
     15a:	8f bd       	out	0x2f, r24	; 47
     15c:	8e b5       	in	r24, 0x2e	; 46
     15e:	87 7f       	andi	r24, 0xF7	; 247
     160:	8e bd       	out	0x2e, r24	; 46
     162:	8e b5       	in	r24, 0x2e	; 46
     164:	8f 7e       	andi	r24, 0xEF	; 239
     166:	8e bd       	out	0x2e, r24	; 46
     168:	08 95       	ret
     16a:	8f b5       	in	r24, 0x2f	; 47
     16c:	81 60       	ori	r24, 0x01	; 1
     16e:	8f bd       	out	0x2f, r24	; 47
     170:	8f b5       	in	r24, 0x2f	; 47
     172:	82 60       	ori	r24, 0x02	; 2
     174:	8f bd       	out	0x2f, r24	; 47
     176:	8e b5       	in	r24, 0x2e	; 46
     178:	87 7f       	andi	r24, 0xF7	; 247
     17a:	8e bd       	out	0x2e, r24	; 46
     17c:	8e b5       	in	r24, 0x2e	; 46
     17e:	8f 7e       	andi	r24, 0xEF	; 239
     180:	8e bd       	out	0x2e, r24	; 46
     182:	08 95       	ret
     184:	8f b5       	in	r24, 0x2f	; 47
     186:	8e 7f       	andi	r24, 0xFE	; 254
     188:	8f bd       	out	0x2f, r24	; 47
     18a:	8f b5       	in	r24, 0x2f	; 47
     18c:	8d 7f       	andi	r24, 0xFD	; 253
     18e:	8f bd       	out	0x2f, r24	; 47
     190:	8e b5       	in	r24, 0x2e	; 46
     192:	88 60       	ori	r24, 0x08	; 8
     194:	8e bd       	out	0x2e, r24	; 46
     196:	8e b5       	in	r24, 0x2e	; 46
     198:	8f 7e       	andi	r24, 0xEF	; 239
     19a:	8e bd       	out	0x2e, r24	; 46
     19c:	08 95       	ret
     19e:	8f b5       	in	r24, 0x2f	; 47
     1a0:	81 60       	ori	r24, 0x01	; 1
     1a2:	8f bd       	out	0x2f, r24	; 47
     1a4:	8f b5       	in	r24, 0x2f	; 47
     1a6:	8d 7f       	andi	r24, 0xFD	; 253
     1a8:	8f bd       	out	0x2f, r24	; 47
     1aa:	8e b5       	in	r24, 0x2e	; 46
     1ac:	88 60       	ori	r24, 0x08	; 8
     1ae:	8e bd       	out	0x2e, r24	; 46
     1b0:	8e b5       	in	r24, 0x2e	; 46
     1b2:	8f 7e       	andi	r24, 0xEF	; 239
     1b4:	8e bd       	out	0x2e, r24	; 46
     1b6:	08 95       	ret
     1b8:	8f b5       	in	r24, 0x2f	; 47
     1ba:	8e 7f       	andi	r24, 0xFE	; 254
     1bc:	8f bd       	out	0x2f, r24	; 47
     1be:	8f b5       	in	r24, 0x2f	; 47
     1c0:	82 60       	ori	r24, 0x02	; 2
     1c2:	8f bd       	out	0x2f, r24	; 47
     1c4:	8e b5       	in	r24, 0x2e	; 46
     1c6:	88 60       	ori	r24, 0x08	; 8
     1c8:	8e bd       	out	0x2e, r24	; 46
     1ca:	8e b5       	in	r24, 0x2e	; 46
     1cc:	8f 7e       	andi	r24, 0xEF	; 239
     1ce:	8e bd       	out	0x2e, r24	; 46
     1d0:	08 95       	ret
     1d2:	8f b5       	in	r24, 0x2f	; 47
     1d4:	81 60       	ori	r24, 0x01	; 1
     1d6:	8f bd       	out	0x2f, r24	; 47
     1d8:	8f b5       	in	r24, 0x2f	; 47
     1da:	82 60       	ori	r24, 0x02	; 2
     1dc:	8f bd       	out	0x2f, r24	; 47
     1de:	8e b5       	in	r24, 0x2e	; 46
     1e0:	88 60       	ori	r24, 0x08	; 8
     1e2:	8e bd       	out	0x2e, r24	; 46
     1e4:	8e b5       	in	r24, 0x2e	; 46
     1e6:	8f 7e       	andi	r24, 0xEF	; 239
     1e8:	8e bd       	out	0x2e, r24	; 46
     1ea:	08 95       	ret
     1ec:	8f b5       	in	r24, 0x2f	; 47
     1ee:	8e 7f       	andi	r24, 0xFE	; 254
     1f0:	8f bd       	out	0x2f, r24	; 47
     1f2:	8f b5       	in	r24, 0x2f	; 47
     1f4:	8d 7f       	andi	r24, 0xFD	; 253
     1f6:	8f bd       	out	0x2f, r24	; 47
     1f8:	8e b5       	in	r24, 0x2e	; 46
     1fa:	87 7f       	andi	r24, 0xF7	; 247
     1fc:	8e bd       	out	0x2e, r24	; 46
     1fe:	8e b5       	in	r24, 0x2e	; 46
     200:	80 61       	ori	r24, 0x10	; 16
     202:	8e bd       	out	0x2e, r24	; 46
     204:	08 95       	ret
     206:	8f b5       	in	r24, 0x2f	; 47
     208:	81 60       	ori	r24, 0x01	; 1
     20a:	8f bd       	out	0x2f, r24	; 47
     20c:	8f b5       	in	r24, 0x2f	; 47
     20e:	8d 7f       	andi	r24, 0xFD	; 253
     210:	8f bd       	out	0x2f, r24	; 47
     212:	8e b5       	in	r24, 0x2e	; 46
     214:	87 7f       	andi	r24, 0xF7	; 247
     216:	8e bd       	out	0x2e, r24	; 46
     218:	8e b5       	in	r24, 0x2e	; 46
     21a:	80 61       	ori	r24, 0x10	; 16
     21c:	8e bd       	out	0x2e, r24	; 46
     21e:	08 95       	ret
     220:	8f b5       	in	r24, 0x2f	; 47
     222:	8e 7f       	andi	r24, 0xFE	; 254
     224:	8f bd       	out	0x2f, r24	; 47
     226:	8f b5       	in	r24, 0x2f	; 47
     228:	82 60       	ori	r24, 0x02	; 2
     22a:	8f bd       	out	0x2f, r24	; 47
     22c:	8e b5       	in	r24, 0x2e	; 46
     22e:	87 7f       	andi	r24, 0xF7	; 247
     230:	8e bd       	out	0x2e, r24	; 46
     232:	8e b5       	in	r24, 0x2e	; 46
     234:	80 61       	ori	r24, 0x10	; 16
     236:	8e bd       	out	0x2e, r24	; 46
     238:	08 95       	ret
     23a:	8f b5       	in	r24, 0x2f	; 47
     23c:	81 60       	ori	r24, 0x01	; 1
     23e:	8f bd       	out	0x2f, r24	; 47
     240:	8f b5       	in	r24, 0x2f	; 47
     242:	82 60       	ori	r24, 0x02	; 2
     244:	8f bd       	out	0x2f, r24	; 47
     246:	8e b5       	in	r24, 0x2e	; 46
     248:	87 7f       	andi	r24, 0xF7	; 247
     24a:	8e bd       	out	0x2e, r24	; 46
     24c:	8e b5       	in	r24, 0x2e	; 46
     24e:	80 61       	ori	r24, 0x10	; 16
     250:	8e bd       	out	0x2e, r24	; 46
     252:	08 95       	ret
     254:	8f b5       	in	r24, 0x2f	; 47
     256:	8e 7f       	andi	r24, 0xFE	; 254
     258:	8f bd       	out	0x2f, r24	; 47
     25a:	8f b5       	in	r24, 0x2f	; 47
     25c:	8d 7f       	andi	r24, 0xFD	; 253
     25e:	8f bd       	out	0x2f, r24	; 47
     260:	8e b5       	in	r24, 0x2e	; 46
     262:	88 60       	ori	r24, 0x08	; 8
     264:	8e bd       	out	0x2e, r24	; 46
     266:	8e b5       	in	r24, 0x2e	; 46
     268:	80 61       	ori	r24, 0x10	; 16
     26a:	8e bd       	out	0x2e, r24	; 46
     26c:	08 95       	ret
     26e:	8f b5       	in	r24, 0x2f	; 47
     270:	8e 7f       	andi	r24, 0xFE	; 254
     272:	8f bd       	out	0x2f, r24	; 47
     274:	8f b5       	in	r24, 0x2f	; 47
     276:	82 60       	ori	r24, 0x02	; 2
     278:	8f bd       	out	0x2f, r24	; 47
     27a:	8e b5       	in	r24, 0x2e	; 46
     27c:	88 60       	ori	r24, 0x08	; 8
     27e:	8e bd       	out	0x2e, r24	; 46
     280:	8e b5       	in	r24, 0x2e	; 46
     282:	80 61       	ori	r24, 0x10	; 16
     284:	8e bd       	out	0x2e, r24	; 46
     286:	08 95       	ret
     288:	8f b5       	in	r24, 0x2f	; 47
     28a:	81 60       	ori	r24, 0x01	; 1
     28c:	8f bd       	out	0x2f, r24	; 47
     28e:	8f b5       	in	r24, 0x2f	; 47
     290:	82 60       	ori	r24, 0x02	; 2
     292:	8f bd       	out	0x2f, r24	; 47
     294:	8e b5       	in	r24, 0x2e	; 46
     296:	88 60       	ori	r24, 0x08	; 8
     298:	8e bd       	out	0x2e, r24	; 46
     29a:	8e b5       	in	r24, 0x2e	; 46
     29c:	80 61       	ori	r24, 0x10	; 16
     29e:	8e bd       	out	0x2e, r24	; 46
     2a0:	08 95       	ret
     2a2:	61 30       	cpi	r22, 0x01	; 1
     2a4:	69 f0       	breq	.+26     	; 0x2c0 <TIMER_setTimer_Mode+0x210>
     2a6:	28 f0       	brcs	.+10     	; 0x2b2 <TIMER_setTimer_Mode+0x202>
     2a8:	64 30       	cpi	r22, 0x04	; 4
     2aa:	89 f0       	breq	.+34     	; 0x2ce <TIMER_setTimer_Mode+0x21e>
     2ac:	65 30       	cpi	r22, 0x05	; 5
     2ae:	b1 f0       	breq	.+44     	; 0x2dc <TIMER_setTimer_Mode+0x22c>
     2b0:	08 95       	ret
     2b2:	85 b5       	in	r24, 0x25	; 37
     2b4:	8f 7b       	andi	r24, 0xBF	; 191
     2b6:	85 bd       	out	0x25, r24	; 37
     2b8:	85 b5       	in	r24, 0x25	; 37
     2ba:	87 7f       	andi	r24, 0xF7	; 247
     2bc:	85 bd       	out	0x25, r24	; 37
     2be:	08 95       	ret
     2c0:	85 b5       	in	r24, 0x25	; 37
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	85 bd       	out	0x25, r24	; 37
     2c6:	85 b5       	in	r24, 0x25	; 37
     2c8:	87 7f       	andi	r24, 0xF7	; 247
     2ca:	85 bd       	out	0x25, r24	; 37
     2cc:	08 95       	ret
     2ce:	85 b5       	in	r24, 0x25	; 37
     2d0:	8f 7b       	andi	r24, 0xBF	; 191
     2d2:	85 bd       	out	0x25, r24	; 37
     2d4:	85 b5       	in	r24, 0x25	; 37
     2d6:	88 60       	ori	r24, 0x08	; 8
     2d8:	85 bd       	out	0x25, r24	; 37
     2da:	08 95       	ret
     2dc:	85 b5       	in	r24, 0x25	; 37
     2de:	80 64       	ori	r24, 0x40	; 64
     2e0:	85 bd       	out	0x25, r24	; 37
     2e2:	85 b5       	in	r24, 0x25	; 37
     2e4:	88 60       	ori	r24, 0x08	; 8
     2e6:	85 bd       	out	0x25, r24	; 37
     2e8:	08 95       	ret

000002ea <TIMER_setOc_Mode>:
     2ea:	81 30       	cpi	r24, 0x01	; 1
     2ec:	41 f0       	breq	.+16     	; 0x2fe <TIMER_setOc_Mode+0x14>
     2ee:	b0 f0       	brcs	.+44     	; 0x31c <TIMER_setOc_Mode+0x32>
     2f0:	82 30       	cpi	r24, 0x02	; 2
     2f2:	51 f0       	breq	.+20     	; 0x308 <TIMER_setOc_Mode+0x1e>
     2f4:	83 30       	cpi	r24, 0x03	; 3
     2f6:	69 f0       	breq	.+26     	; 0x312 <TIMER_setOc_Mode+0x28>
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	13 c0       	rjmp	.+38     	; 0x324 <TIMER_setOc_Mode+0x3a>
     2fe:	ef e4       	ldi	r30, 0x4F	; 79
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	87 e0       	ldi	r24, 0x07	; 7
     304:	96 e0       	ldi	r25, 0x06	; 6
     306:	0e c0       	rjmp	.+28     	; 0x324 <TIMER_setOc_Mode+0x3a>
     308:	ef e4       	ldi	r30, 0x4F	; 79
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	85 e0       	ldi	r24, 0x05	; 5
     30e:	94 e0       	ldi	r25, 0x04	; 4
     310:	09 c0       	rjmp	.+18     	; 0x324 <TIMER_setOc_Mode+0x3a>
     312:	e5 e4       	ldi	r30, 0x45	; 69
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	85 e0       	ldi	r24, 0x05	; 5
     318:	94 e0       	ldi	r25, 0x04	; 4
     31a:	04 c0       	rjmp	.+8      	; 0x324 <TIMER_setOc_Mode+0x3a>
     31c:	e3 e5       	ldi	r30, 0x53	; 83
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	85 e0       	ldi	r24, 0x05	; 5
     322:	94 e0       	ldi	r25, 0x04	; 4
     324:	61 30       	cpi	r22, 0x01	; 1
     326:	f1 f0       	breq	.+60     	; 0x364 <TIMER_setOc_Mode+0x7a>
     328:	30 f0       	brcs	.+12     	; 0x336 <TIMER_setOc_Mode+0x4c>
     32a:	62 30       	cpi	r22, 0x02	; 2
     32c:	81 f1       	breq	.+96     	; 0x38e <TIMER_setOc_Mode+0xa4>
     32e:	63 30       	cpi	r22, 0x03	; 3
     330:	09 f4       	brne	.+2      	; 0x334 <TIMER_setOc_Mode+0x4a>
     332:	43 c0       	rjmp	.+134    	; 0x3ba <TIMER_setOc_Mode+0xd0>
     334:	08 95       	ret
     336:	40 81       	ld	r20, Z
     338:	21 e0       	ldi	r18, 0x01	; 1
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	b9 01       	movw	r22, r18
     33e:	02 c0       	rjmp	.+4      	; 0x344 <TIMER_setOc_Mode+0x5a>
     340:	66 0f       	add	r22, r22
     342:	77 1f       	adc	r23, r23
     344:	9a 95       	dec	r25
     346:	e2 f7       	brpl	.-8      	; 0x340 <TIMER_setOc_Mode+0x56>
     348:	96 2f       	mov	r25, r22
     34a:	90 95       	com	r25
     34c:	94 23       	and	r25, r20
     34e:	90 83       	st	Z, r25
     350:	90 81       	ld	r25, Z
     352:	02 c0       	rjmp	.+4      	; 0x358 <TIMER_setOc_Mode+0x6e>
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	8a 95       	dec	r24
     35a:	e2 f7       	brpl	.-8      	; 0x354 <TIMER_setOc_Mode+0x6a>
     35c:	20 95       	com	r18
     35e:	29 23       	and	r18, r25
     360:	20 83       	st	Z, r18
     362:	08 95       	ret
     364:	60 81       	ld	r22, Z
     366:	21 e0       	ldi	r18, 0x01	; 1
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	a9 01       	movw	r20, r18
     36c:	02 c0       	rjmp	.+4      	; 0x372 <TIMER_setOc_Mode+0x88>
     36e:	44 0f       	add	r20, r20
     370:	55 1f       	adc	r21, r21
     372:	9a 95       	dec	r25
     374:	e2 f7       	brpl	.-8      	; 0x36e <TIMER_setOc_Mode+0x84>
     376:	46 2b       	or	r20, r22
     378:	40 83       	st	Z, r20
     37a:	90 81       	ld	r25, Z
     37c:	02 c0       	rjmp	.+4      	; 0x382 <TIMER_setOc_Mode+0x98>
     37e:	22 0f       	add	r18, r18
     380:	33 1f       	adc	r19, r19
     382:	8a 95       	dec	r24
     384:	e2 f7       	brpl	.-8      	; 0x37e <TIMER_setOc_Mode+0x94>
     386:	20 95       	com	r18
     388:	29 23       	and	r18, r25
     38a:	20 83       	st	Z, r18
     38c:	08 95       	ret
     38e:	40 81       	ld	r20, Z
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	b9 01       	movw	r22, r18
     396:	02 c0       	rjmp	.+4      	; 0x39c <TIMER_setOc_Mode+0xb2>
     398:	66 0f       	add	r22, r22
     39a:	77 1f       	adc	r23, r23
     39c:	9a 95       	dec	r25
     39e:	e2 f7       	brpl	.-8      	; 0x398 <TIMER_setOc_Mode+0xae>
     3a0:	96 2f       	mov	r25, r22
     3a2:	90 95       	com	r25
     3a4:	94 23       	and	r25, r20
     3a6:	90 83       	st	Z, r25
     3a8:	90 81       	ld	r25, Z
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <TIMER_setOc_Mode+0xc6>
     3ac:	22 0f       	add	r18, r18
     3ae:	33 1f       	adc	r19, r19
     3b0:	8a 95       	dec	r24
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <TIMER_setOc_Mode+0xc2>
     3b4:	29 2b       	or	r18, r25
     3b6:	20 83       	st	Z, r18
     3b8:	08 95       	ret
     3ba:	60 81       	ld	r22, Z
     3bc:	21 e0       	ldi	r18, 0x01	; 1
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	a9 01       	movw	r20, r18
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <TIMER_setOc_Mode+0xde>
     3c4:	44 0f       	add	r20, r20
     3c6:	55 1f       	adc	r21, r21
     3c8:	9a 95       	dec	r25
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <TIMER_setOc_Mode+0xda>
     3cc:	46 2b       	or	r20, r22
     3ce:	40 83       	st	Z, r20
     3d0:	90 81       	ld	r25, Z
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <TIMER_setOc_Mode+0xee>
     3d4:	22 0f       	add	r18, r18
     3d6:	33 1f       	adc	r19, r19
     3d8:	8a 95       	dec	r24
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <TIMER_setOc_Mode+0xea>
     3dc:	29 2b       	or	r18, r25
     3de:	20 83       	st	Z, r18
     3e0:	08 95       	ret

000003e2 <TIMER_setClk>:
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	21 f0       	breq	.+8      	; 0x3ee <TIMER_setClk+0xc>
     3e6:	48 f0       	brcs	.+18     	; 0x3fa <TIMER_setClk+0x18>
     3e8:	82 30       	cpi	r24, 0x02	; 2
     3ea:	21 f0       	breq	.+8      	; 0x3f4 <TIMER_setClk+0x12>
     3ec:	08 c0       	rjmp	.+16     	; 0x3fe <TIMER_setClk+0x1c>
     3ee:	ee e4       	ldi	r30, 0x4E	; 78
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <TIMER_setClk+0x1c>
     3f4:	e5 e4       	ldi	r30, 0x45	; 69
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <TIMER_setClk+0x1c>
     3fa:	e3 e5       	ldi	r30, 0x53	; 83
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	88 7f       	andi	r24, 0xF8	; 248
     402:	67 70       	andi	r22, 0x07	; 7
     404:	68 2b       	or	r22, r24
     406:	60 83       	st	Z, r22
     408:	08 95       	ret

0000040a <TIMER1_Init>:
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	16 2f       	mov	r17, r22
     412:	d4 2f       	mov	r29, r20
     414:	c2 2f       	mov	r28, r18
     416:	68 2f       	mov	r22, r24
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 58 00 	call	0xb0	; 0xb0 <TIMER_setTimer_Mode>
     41e:	61 2f       	mov	r22, r17
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 75 01 	call	0x2ea	; 0x2ea <TIMER_setOc_Mode>
     426:	6d 2f       	mov	r22, r29
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	0e 94 75 01 	call	0x2ea	; 0x2ea <TIMER_setOc_Mode>
     42e:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <Timer1_Clk>
     432:	6c 2f       	mov	r22, r28
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <TIMER_setClk>
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	08 95       	ret

00000442 <TIMER_ONOFF>:
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	a1 f0       	breq	.+40     	; 0x46e <TIMER_ONOFF+0x2c>
     446:	18 f0       	brcs	.+6      	; 0x44e <TIMER_ONOFF+0xc>
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	09 f1       	breq	.+66     	; 0x48e <TIMER_ONOFF+0x4c>
     44c:	08 95       	ret
     44e:	61 30       	cpi	r22, 0x01	; 1
     450:	41 f4       	brne	.+16     	; 0x462 <TIMER_ONOFF+0x20>
     452:	83 b7       	in	r24, 0x33	; 51
     454:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <Timer0_Clk>
     458:	97 70       	andi	r25, 0x07	; 7
     45a:	88 7f       	andi	r24, 0xF8	; 248
     45c:	89 2b       	or	r24, r25
     45e:	83 bf       	out	0x33, r24	; 51
     460:	08 95       	ret
     462:	61 11       	cpse	r22, r1
     464:	23 c0       	rjmp	.+70     	; 0x4ac <TIMER_ONOFF+0x6a>
     466:	83 b7       	in	r24, 0x33	; 51
     468:	88 7f       	andi	r24, 0xF8	; 248
     46a:	83 bf       	out	0x33, r24	; 51
     46c:	08 95       	ret
     46e:	61 30       	cpi	r22, 0x01	; 1
     470:	41 f4       	brne	.+16     	; 0x482 <TIMER_ONOFF+0x40>
     472:	8e b5       	in	r24, 0x2e	; 46
     474:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Timer1_Clk>
     478:	97 70       	andi	r25, 0x07	; 7
     47a:	88 7f       	andi	r24, 0xF8	; 248
     47c:	89 2b       	or	r24, r25
     47e:	8e bd       	out	0x2e, r24	; 46
     480:	08 95       	ret
     482:	61 11       	cpse	r22, r1
     484:	13 c0       	rjmp	.+38     	; 0x4ac <TIMER_ONOFF+0x6a>
     486:	8e b5       	in	r24, 0x2e	; 46
     488:	88 7f       	andi	r24, 0xF8	; 248
     48a:	8e bd       	out	0x2e, r24	; 46
     48c:	08 95       	ret
     48e:	61 30       	cpi	r22, 0x01	; 1
     490:	41 f4       	brne	.+16     	; 0x4a2 <TIMER_ONOFF+0x60>
     492:	85 b5       	in	r24, 0x25	; 37
     494:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     498:	97 70       	andi	r25, 0x07	; 7
     49a:	88 7f       	andi	r24, 0xF8	; 248
     49c:	89 2b       	or	r24, r25
     49e:	85 bd       	out	0x25, r24	; 37
     4a0:	08 95       	ret
     4a2:	61 11       	cpse	r22, r1
     4a4:	03 c0       	rjmp	.+6      	; 0x4ac <TIMER_ONOFF+0x6a>
     4a6:	85 b5       	in	r24, 0x25	; 37
     4a8:	88 7f       	andi	r24, 0xF8	; 248
     4aa:	85 bd       	out	0x25, r24	; 37
     4ac:	08 95       	ret

000004ae <TIMER1_OVF_INT>:
     4ae:	29 b7       	in	r18, 0x39	; 57
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	92 2f       	mov	r25, r18
     4bc:	9b 7f       	andi	r25, 0xFB	; 251
     4be:	89 2b       	or	r24, r25
     4c0:	89 bf       	out	0x39, r24	; 57
     4c2:	08 95       	ret

000004c4 <TIMER1_OVF_SetCallBack>:
     4c4:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <TIMER1_OVF_Fptr+0x1>
     4c8:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <TIMER1_OVF_Fptr>
     4cc:	08 95       	ret

000004ce <__vector_11>:
/*                                                                             */
/*                         Interrupt Service Routines                          */
/*                                                                             */
/*-----------------------------------------------------------------------------*/
ISR(TIMER0_OVF_VECT)
{
     4ce:	1f 92       	push	r1
     4d0:	0f 92       	push	r0
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	0f 92       	push	r0
     4d6:	11 24       	eor	r1, r1
     4d8:	2f 93       	push	r18
     4da:	3f 93       	push	r19
     4dc:	4f 93       	push	r20
     4de:	5f 93       	push	r21
     4e0:	6f 93       	push	r22
     4e2:	7f 93       	push	r23
     4e4:	8f 93       	push	r24
     4e6:	9f 93       	push	r25
     4e8:	af 93       	push	r26
     4ea:	bf 93       	push	r27
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
	if (TIMER0_OVF_Fptr != NULL_PTR)
     4f0:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <TIMER0_OVF_Fptr>
     4f4:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <TIMER0_OVF_Fptr+0x1>
     4f8:	30 97       	sbiw	r30, 0x00	; 0
     4fa:	09 f0       	breq	.+2      	; 0x4fe <__vector_11+0x30>
	{
		TIMER0_OVF_Fptr();
     4fc:	09 95       	icall
	}
}
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	bf 91       	pop	r27
     504:	af 91       	pop	r26
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	7f 91       	pop	r23
     50c:	6f 91       	pop	r22
     50e:	5f 91       	pop	r21
     510:	4f 91       	pop	r20
     512:	3f 91       	pop	r19
     514:	2f 91       	pop	r18
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_10>:
ISR(TIMER0_COMP_VECT)
{
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	2f 93       	push	r18
     52c:	3f 93       	push	r19
     52e:	4f 93       	push	r20
     530:	5f 93       	push	r21
     532:	6f 93       	push	r22
     534:	7f 93       	push	r23
     536:	8f 93       	push	r24
     538:	9f 93       	push	r25
     53a:	af 93       	push	r26
     53c:	bf 93       	push	r27
     53e:	ef 93       	push	r30
     540:	ff 93       	push	r31
	if (TIMER0_COMP_Fptr != NULL_PTR)
     542:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <TIMER0_COMP_Fptr>
     546:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <TIMER0_COMP_Fptr+0x1>
     54a:	30 97       	sbiw	r30, 0x00	; 0
     54c:	09 f0       	breq	.+2      	; 0x550 <__vector_10+0x30>
	{
		TIMER0_COMP_Fptr();
     54e:	09 95       	icall
	}
}
     550:	ff 91       	pop	r31
     552:	ef 91       	pop	r30
     554:	bf 91       	pop	r27
     556:	af 91       	pop	r26
     558:	9f 91       	pop	r25
     55a:	8f 91       	pop	r24
     55c:	7f 91       	pop	r23
     55e:	6f 91       	pop	r22
     560:	5f 91       	pop	r21
     562:	4f 91       	pop	r20
     564:	3f 91       	pop	r19
     566:	2f 91       	pop	r18
     568:	0f 90       	pop	r0
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	0f 90       	pop	r0
     56e:	1f 90       	pop	r1
     570:	18 95       	reti

00000572 <__vector_9>:
ISR(TIMER1_OVF_VECT)
{
     572:	1f 92       	push	r1
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	0f 92       	push	r0
     57a:	11 24       	eor	r1, r1
     57c:	2f 93       	push	r18
     57e:	3f 93       	push	r19
     580:	4f 93       	push	r20
     582:	5f 93       	push	r21
     584:	6f 93       	push	r22
     586:	7f 93       	push	r23
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	af 93       	push	r26
     58e:	bf 93       	push	r27
     590:	ef 93       	push	r30
     592:	ff 93       	push	r31
	if (TIMER1_OVF_Fptr != NULL_PTR)
     594:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <TIMER1_OVF_Fptr>
     598:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <TIMER1_OVF_Fptr+0x1>
     59c:	30 97       	sbiw	r30, 0x00	; 0
     59e:	09 f0       	breq	.+2      	; 0x5a2 <__vector_9+0x30>
	{
		TIMER1_OVF_Fptr();
     5a0:	09 95       	icall
	}
}
     5a2:	ff 91       	pop	r31
     5a4:	ef 91       	pop	r30
     5a6:	bf 91       	pop	r27
     5a8:	af 91       	pop	r26
     5aa:	9f 91       	pop	r25
     5ac:	8f 91       	pop	r24
     5ae:	7f 91       	pop	r23
     5b0:	6f 91       	pop	r22
     5b2:	5f 91       	pop	r21
     5b4:	4f 91       	pop	r20
     5b6:	3f 91       	pop	r19
     5b8:	2f 91       	pop	r18
     5ba:	0f 90       	pop	r0
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	0f 90       	pop	r0
     5c0:	1f 90       	pop	r1
     5c2:	18 95       	reti

000005c4 <__vector_7>:
ISR(TIMER1_COMPA_VECT)
{
     5c4:	1f 92       	push	r1
     5c6:	0f 92       	push	r0
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	0f 92       	push	r0
     5cc:	11 24       	eor	r1, r1
     5ce:	2f 93       	push	r18
     5d0:	3f 93       	push	r19
     5d2:	4f 93       	push	r20
     5d4:	5f 93       	push	r21
     5d6:	6f 93       	push	r22
     5d8:	7f 93       	push	r23
     5da:	8f 93       	push	r24
     5dc:	9f 93       	push	r25
     5de:	af 93       	push	r26
     5e0:	bf 93       	push	r27
     5e2:	ef 93       	push	r30
     5e4:	ff 93       	push	r31
	if (TIMER1_COMPA_Fptr != NULL_PTR)
     5e6:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <TIMER1_COMPA_Fptr>
     5ea:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <TIMER1_COMPA_Fptr+0x1>
     5ee:	30 97       	sbiw	r30, 0x00	; 0
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <__vector_7+0x30>
	{
		TIMER1_COMPA_Fptr();
     5f2:	09 95       	icall
	}
}
     5f4:	ff 91       	pop	r31
     5f6:	ef 91       	pop	r30
     5f8:	bf 91       	pop	r27
     5fa:	af 91       	pop	r26
     5fc:	9f 91       	pop	r25
     5fe:	8f 91       	pop	r24
     600:	7f 91       	pop	r23
     602:	6f 91       	pop	r22
     604:	5f 91       	pop	r21
     606:	4f 91       	pop	r20
     608:	3f 91       	pop	r19
     60a:	2f 91       	pop	r18
     60c:	0f 90       	pop	r0
     60e:	0f be       	out	0x3f, r0	; 63
     610:	0f 90       	pop	r0
     612:	1f 90       	pop	r1
     614:	18 95       	reti

00000616 <__vector_8>:
ISR(TIMER1_COMPB_VECT)
{
     616:	1f 92       	push	r1
     618:	0f 92       	push	r0
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	0f 92       	push	r0
     61e:	11 24       	eor	r1, r1
     620:	2f 93       	push	r18
     622:	3f 93       	push	r19
     624:	4f 93       	push	r20
     626:	5f 93       	push	r21
     628:	6f 93       	push	r22
     62a:	7f 93       	push	r23
     62c:	8f 93       	push	r24
     62e:	9f 93       	push	r25
     630:	af 93       	push	r26
     632:	bf 93       	push	r27
     634:	ef 93       	push	r30
     636:	ff 93       	push	r31
	if (TIMER1_COMPB_Fptr != NULL_PTR)
     638:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <TIMER1_COMPB_Fptr>
     63c:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <TIMER1_COMPB_Fptr+0x1>
     640:	30 97       	sbiw	r30, 0x00	; 0
     642:	09 f0       	breq	.+2      	; 0x646 <__vector_8+0x30>
	{
		TIMER1_COMPB_Fptr();
     644:	09 95       	icall
	}
}
     646:	ff 91       	pop	r31
     648:	ef 91       	pop	r30
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	7f 91       	pop	r23
     654:	6f 91       	pop	r22
     656:	5f 91       	pop	r21
     658:	4f 91       	pop	r20
     65a:	3f 91       	pop	r19
     65c:	2f 91       	pop	r18
     65e:	0f 90       	pop	r0
     660:	0f be       	out	0x3f, r0	; 63
     662:	0f 90       	pop	r0
     664:	1f 90       	pop	r1
     666:	18 95       	reti

00000668 <__vector_6>:
ISR(TIMER1_CAPT_VECT)
{
     668:	1f 92       	push	r1
     66a:	0f 92       	push	r0
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	0f 92       	push	r0
     670:	11 24       	eor	r1, r1
     672:	2f 93       	push	r18
     674:	3f 93       	push	r19
     676:	4f 93       	push	r20
     678:	5f 93       	push	r21
     67a:	6f 93       	push	r22
     67c:	7f 93       	push	r23
     67e:	8f 93       	push	r24
     680:	9f 93       	push	r25
     682:	af 93       	push	r26
     684:	bf 93       	push	r27
     686:	ef 93       	push	r30
     688:	ff 93       	push	r31
	if (TIMER1_CAPT_Fptr != NULL_PTR)
     68a:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <TIMER1_CAPT_Fptr>
     68e:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <TIMER1_CAPT_Fptr+0x1>
     692:	30 97       	sbiw	r30, 0x00	; 0
     694:	09 f0       	breq	.+2      	; 0x698 <__vector_6+0x30>
	{
		TIMER1_CAPT_Fptr();
     696:	09 95       	icall
	}
}
     698:	ff 91       	pop	r31
     69a:	ef 91       	pop	r30
     69c:	bf 91       	pop	r27
     69e:	af 91       	pop	r26
     6a0:	9f 91       	pop	r25
     6a2:	8f 91       	pop	r24
     6a4:	7f 91       	pop	r23
     6a6:	6f 91       	pop	r22
     6a8:	5f 91       	pop	r21
     6aa:	4f 91       	pop	r20
     6ac:	3f 91       	pop	r19
     6ae:	2f 91       	pop	r18
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	0f 90       	pop	r0
     6b6:	1f 90       	pop	r1
     6b8:	18 95       	reti

000006ba <__vector_5>:
ISR(TIMER2_OVF_VECT)
{
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	2f 93       	push	r18
     6c6:	3f 93       	push	r19
     6c8:	4f 93       	push	r20
     6ca:	5f 93       	push	r21
     6cc:	6f 93       	push	r22
     6ce:	7f 93       	push	r23
     6d0:	8f 93       	push	r24
     6d2:	9f 93       	push	r25
     6d4:	af 93       	push	r26
     6d6:	bf 93       	push	r27
     6d8:	ef 93       	push	r30
     6da:	ff 93       	push	r31
	if (TIMER2_OVF_Fptr != NULL_PTR)
     6dc:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <TIMER2_OVF_Fptr>
     6e0:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <TIMER2_OVF_Fptr+0x1>
     6e4:	30 97       	sbiw	r30, 0x00	; 0
     6e6:	09 f0       	breq	.+2      	; 0x6ea <__vector_5+0x30>
	{
		TIMER2_OVF_Fptr();
     6e8:	09 95       	icall
	}
}
     6ea:	ff 91       	pop	r31
     6ec:	ef 91       	pop	r30
     6ee:	bf 91       	pop	r27
     6f0:	af 91       	pop	r26
     6f2:	9f 91       	pop	r25
     6f4:	8f 91       	pop	r24
     6f6:	7f 91       	pop	r23
     6f8:	6f 91       	pop	r22
     6fa:	5f 91       	pop	r21
     6fc:	4f 91       	pop	r20
     6fe:	3f 91       	pop	r19
     700:	2f 91       	pop	r18
     702:	0f 90       	pop	r0
     704:	0f be       	out	0x3f, r0	; 63
     706:	0f 90       	pop	r0
     708:	1f 90       	pop	r1
     70a:	18 95       	reti

0000070c <__vector_4>:
ISR(TIMER2_COMP_VECT)
{
     70c:	1f 92       	push	r1
     70e:	0f 92       	push	r0
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	0f 92       	push	r0
     714:	11 24       	eor	r1, r1
     716:	2f 93       	push	r18
     718:	3f 93       	push	r19
     71a:	4f 93       	push	r20
     71c:	5f 93       	push	r21
     71e:	6f 93       	push	r22
     720:	7f 93       	push	r23
     722:	8f 93       	push	r24
     724:	9f 93       	push	r25
     726:	af 93       	push	r26
     728:	bf 93       	push	r27
     72a:	ef 93       	push	r30
     72c:	ff 93       	push	r31
	if (TIMER2_COMP_Fptr != NULL_PTR)
     72e:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <__data_end>
     732:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <__data_end+0x1>
     736:	30 97       	sbiw	r30, 0x00	; 0
     738:	09 f0       	breq	.+2      	; 0x73c <__vector_4+0x30>
	{
		TIMER2_COMP_Fptr();
     73a:	09 95       	icall
	}
}
     73c:	ff 91       	pop	r31
     73e:	ef 91       	pop	r30
     740:	bf 91       	pop	r27
     742:	af 91       	pop	r26
     744:	9f 91       	pop	r25
     746:	8f 91       	pop	r24
     748:	7f 91       	pop	r23
     74a:	6f 91       	pop	r22
     74c:	5f 91       	pop	r21
     74e:	4f 91       	pop	r20
     750:	3f 91       	pop	r19
     752:	2f 91       	pop	r18
     754:	0f 90       	pop	r0
     756:	0f be       	out	0x3f, r0	; 63
     758:	0f 90       	pop	r0
     75a:	1f 90       	pop	r1
     75c:	18 95       	reti

0000075e <__vector_1>:
/*                                                                             */
/*                         Interrupt Service Routines                          */
/*                                                                             */
/*-----------------------------------------------------------------------------*/
ISR(INT0_VECT)
{
     75e:	1f 92       	push	r1
     760:	0f 92       	push	r0
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	0f 92       	push	r0
     766:	11 24       	eor	r1, r1
     768:	2f 93       	push	r18
     76a:	3f 93       	push	r19
     76c:	4f 93       	push	r20
     76e:	5f 93       	push	r21
     770:	6f 93       	push	r22
     772:	7f 93       	push	r23
     774:	8f 93       	push	r24
     776:	9f 93       	push	r25
     778:	af 93       	push	r26
     77a:	bf 93       	push	r27
     77c:	ef 93       	push	r30
     77e:	ff 93       	push	r31
	if (pfCallBackInt0!=NULL_PTR)
     780:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <pfCallBackInt0>
     784:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <pfCallBackInt0+0x1>
     788:	30 97       	sbiw	r30, 0x00	; 0
     78a:	09 f0       	breq	.+2      	; 0x78e <__vector_1+0x30>
	{
		pfCallBackInt0();
     78c:	09 95       	icall
	}
}
     78e:	ff 91       	pop	r31
     790:	ef 91       	pop	r30
     792:	bf 91       	pop	r27
     794:	af 91       	pop	r26
     796:	9f 91       	pop	r25
     798:	8f 91       	pop	r24
     79a:	7f 91       	pop	r23
     79c:	6f 91       	pop	r22
     79e:	5f 91       	pop	r21
     7a0:	4f 91       	pop	r20
     7a2:	3f 91       	pop	r19
     7a4:	2f 91       	pop	r18
     7a6:	0f 90       	pop	r0
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	0f 90       	pop	r0
     7ac:	1f 90       	pop	r1
     7ae:	18 95       	reti

000007b0 <__vector_2>:
ISR(INT1_VECT)
{
     7b0:	1f 92       	push	r1
     7b2:	0f 92       	push	r0
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
     7ba:	2f 93       	push	r18
     7bc:	3f 93       	push	r19
     7be:	4f 93       	push	r20
     7c0:	5f 93       	push	r21
     7c2:	6f 93       	push	r22
     7c4:	7f 93       	push	r23
     7c6:	8f 93       	push	r24
     7c8:	9f 93       	push	r25
     7ca:	af 93       	push	r26
     7cc:	bf 93       	push	r27
     7ce:	ef 93       	push	r30
     7d0:	ff 93       	push	r31
	if (pfCallBackInt1!=NULL_PTR)
     7d2:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <pfCallBackInt1>
     7d6:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <pfCallBackInt1+0x1>
     7da:	30 97       	sbiw	r30, 0x00	; 0
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <__vector_2+0x30>
	{
		pfCallBackInt1();
     7de:	09 95       	icall
	}
}
     7e0:	ff 91       	pop	r31
     7e2:	ef 91       	pop	r30
     7e4:	bf 91       	pop	r27
     7e6:	af 91       	pop	r26
     7e8:	9f 91       	pop	r25
     7ea:	8f 91       	pop	r24
     7ec:	7f 91       	pop	r23
     7ee:	6f 91       	pop	r22
     7f0:	5f 91       	pop	r21
     7f2:	4f 91       	pop	r20
     7f4:	3f 91       	pop	r19
     7f6:	2f 91       	pop	r18
     7f8:	0f 90       	pop	r0
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	0f 90       	pop	r0
     7fe:	1f 90       	pop	r1
     800:	18 95       	reti

00000802 <__vector_3>:
ISR(INT2_VECT)
{
     802:	1f 92       	push	r1
     804:	0f 92       	push	r0
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	0f 92       	push	r0
     80a:	11 24       	eor	r1, r1
     80c:	2f 93       	push	r18
     80e:	3f 93       	push	r19
     810:	4f 93       	push	r20
     812:	5f 93       	push	r21
     814:	6f 93       	push	r22
     816:	7f 93       	push	r23
     818:	8f 93       	push	r24
     81a:	9f 93       	push	r25
     81c:	af 93       	push	r26
     81e:	bf 93       	push	r27
     820:	ef 93       	push	r30
     822:	ff 93       	push	r31
	if (pfCallBackInt2!=NULL_PTR)
     824:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <pfCallBackInt2>
     828:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <pfCallBackInt2+0x1>
     82c:	30 97       	sbiw	r30, 0x00	; 0
     82e:	09 f0       	breq	.+2      	; 0x832 <__vector_3+0x30>
	{
		pfCallBackInt2();
     830:	09 95       	icall
	}
}
     832:	ff 91       	pop	r31
     834:	ef 91       	pop	r30
     836:	bf 91       	pop	r27
     838:	af 91       	pop	r26
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	7f 91       	pop	r23
     840:	6f 91       	pop	r22
     842:	5f 91       	pop	r21
     844:	4f 91       	pop	r20
     846:	3f 91       	pop	r19
     848:	2f 91       	pop	r18
     84a:	0f 90       	pop	r0
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	0f 90       	pop	r0
     850:	1f 90       	pop	r1
     852:	18 95       	reti

00000854 <KEYPAD_GetKey>:
#include "Keypad_Lcfg.h"
#include "Keypad_private.h"


Std_Error_t KEYPAD_GetKey(u8 *key)
{
     854:	9f 92       	push	r9
     856:	af 92       	push	r10
     858:	bf 92       	push	r11
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	7c 01       	movw	r14, r24
	Std_Status_t isKeyPressed=STD_FALSE;
	
	u8 rowsCounter,colsCounter;
	
	// loop to make all row pins are "high volt"
	for (rowsCounter=0; rowsCounter<ROWS ;rowsCounter++)
     86c:	c0 e0       	ldi	r28, 0x00	; 0
     86e:	09 c0       	rjmp	.+18     	; 0x882 <__stack+0x23>
	{
		Dio_WritePin(keypad_pinMap.kEYPAD_rows[rowsCounter],DIO_VOLT_HIGH);
     870:	ec 2f       	mov	r30, r28
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	e0 57       	subi	r30, 0x70	; 112
     876:	ff 4f       	sbci	r31, 0xFF	; 255
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	80 81       	ld	r24, Z
     87c:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
	Std_Status_t isKeyPressed=STD_FALSE;
	
	u8 rowsCounter,colsCounter;
	
	// loop to make all row pins are "high volt"
	for (rowsCounter=0; rowsCounter<ROWS ;rowsCounter++)
     880:	cf 5f       	subi	r28, 0xFF	; 255
     882:	c4 30       	cpi	r28, 0x04	; 4
     884:	a8 f3       	brcs	.-22     	; 0x870 <__stack+0x11>
     886:	d0 e0       	ldi	r29, 0x00	; 0
     888:	d1 2c       	mov	r13, r1
     88a:	bb 24       	eor	r11, r11
     88c:	b3 94       	inc	r11
     88e:	37 c0       	rjmp	.+110    	; 0x8fe <__stack+0x9f>
	}
	
	// loop at each row pin by make it "low volt" and check for first col pin that equals to "low volt"
	for (rowsCounter=0; rowsCounter<ROWS; rowsCounter++)
	{
		Dio_WritePin(keypad_pinMap.kEYPAD_rows[rowsCounter],DIO_VOLT_LOW); /*< change this row pin to "low volt" to check which col pin is "low volt" too */
     890:	0d 2f       	mov	r16, r29
     892:	10 e0       	ldi	r17, 0x00	; 0
     894:	f8 01       	movw	r30, r16
     896:	e0 57       	subi	r30, 0x70	; 112
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	c0 80       	ld	r12, Z
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	8c 2d       	mov	r24, r12
     8a0:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
		
		for (colsCounter=0; (colsCounter<COLS)&&(isKeyPressed==STD_FALSE) ;colsCounter++)
     8a4:	c0 e0       	ldi	r28, 0x00	; 0
     8a6:	22 c0       	rjmp	.+68     	; 0x8ec <__stack+0x8d>
		{
			if (keypad_charArray[rowsCounter][colsCounter] != '\0') /*< to neglect null keys that didnt needed in your application */
     8a8:	8c 2f       	mov	r24, r28
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	f8 01       	movw	r30, r16
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	ee 0f       	add	r30, r30
     8b4:	ff 1f       	adc	r31, r31
     8b6:	e8 56       	subi	r30, 0x68	; 104
     8b8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ba:	e8 0f       	add	r30, r24
     8bc:	f9 1f       	adc	r31, r25
     8be:	90 80       	ld	r9, Z
     8c0:	99 20       	and	r9, r9
     8c2:	99 f0       	breq	.+38     	; 0x8ea <__stack+0x8b>
			{
				if (Dio_ReadPin(keypad_pinMap.kEYPAD_cols[colsCounter])==DIO_VOLT_LOW) /*< check which col pin is "low volt" */
     8c4:	fc 01       	movw	r30, r24
     8c6:	e0 57       	subi	r30, 0x70	; 112
     8c8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ca:	a4 80       	ldd	r10, Z+4	; 0x04
     8cc:	8a 2d       	mov	r24, r10
     8ce:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Dio_ReadPin>
     8d2:	81 11       	cpse	r24, r1
     8d4:	0a c0       	rjmp	.+20     	; 0x8ea <__stack+0x8b>
				{
					isKeyPressed=STD_TRUE; /*< there is key pressed so it is not needed to loop more*/
					*key=keypad_charArray[rowsCounter][colsCounter]; /*< get key */
     8d6:	f7 01       	movw	r30, r14
     8d8:	90 82       	st	Z, r9
					while(Dio_ReadPin(keypad_pinMap.kEYPAD_cols[colsCounter])==DIO_VOLT_LOW);/*< busy wait until key released */
     8da:	8a 2d       	mov	r24, r10
     8dc:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Dio_ReadPin>
     8e0:	88 23       	and	r24, r24
     8e2:	d9 f3       	breq	.-10     	; 0x8da <__stack+0x7b>
		{
			if (keypad_charArray[rowsCounter][colsCounter] != '\0') /*< to neglect null keys that didnt needed in your application */
			{
				if (Dio_ReadPin(keypad_pinMap.kEYPAD_cols[colsCounter])==DIO_VOLT_LOW) /*< check which col pin is "low volt" */
				{
					isKeyPressed=STD_TRUE; /*< there is key pressed so it is not needed to loop more*/
     8e4:	dd 24       	eor	r13, r13
     8e6:	d3 94       	inc	r13
					*key=keypad_charArray[rowsCounter][colsCounter]; /*< get key */
					while(Dio_ReadPin(keypad_pinMap.kEYPAD_cols[colsCounter])==DIO_VOLT_LOW);/*< busy wait until key released */
					error=STD_OK; /*< indicate that function get key successfully */
     8e8:	b1 2c       	mov	r11, r1
	// loop at each row pin by make it "low volt" and check for first col pin that equals to "low volt"
	for (rowsCounter=0; rowsCounter<ROWS; rowsCounter++)
	{
		Dio_WritePin(keypad_pinMap.kEYPAD_rows[rowsCounter],DIO_VOLT_LOW); /*< change this row pin to "low volt" to check which col pin is "low volt" too */
		
		for (colsCounter=0; (colsCounter<COLS)&&(isKeyPressed==STD_FALSE) ;colsCounter++)
     8ea:	cf 5f       	subi	r28, 0xFF	; 255
     8ec:	c4 30       	cpi	r28, 0x04	; 4
     8ee:	10 f4       	brcc	.+4      	; 0x8f4 <__stack+0x95>
     8f0:	dd 20       	and	r13, r13
     8f2:	d1 f2       	breq	.-76     	; 0x8a8 <__stack+0x49>
					while(Dio_ReadPin(keypad_pinMap.kEYPAD_cols[colsCounter])==DIO_VOLT_LOW);/*< busy wait until key released */
					error=STD_OK; /*< indicate that function get key successfully */
				}
			}
		}
		Dio_WritePin(keypad_pinMap.kEYPAD_rows[rowsCounter],DIO_VOLT_HIGH); /*< switch this row pin to "high volt" again */
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	8c 2d       	mov	r24, r12
     8f8:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
	{
		Dio_WritePin(keypad_pinMap.kEYPAD_rows[rowsCounter],DIO_VOLT_HIGH);
	}
	
	// loop at each row pin by make it "low volt" and check for first col pin that equals to "low volt"
	for (rowsCounter=0; rowsCounter<ROWS; rowsCounter++)
     8fc:	df 5f       	subi	r29, 0xFF	; 255
     8fe:	d4 30       	cpi	r29, 0x04	; 4
     900:	38 f2       	brcs	.-114    	; 0x890 <__stack+0x31>
			}
		}
		Dio_WritePin(keypad_pinMap.kEYPAD_rows[rowsCounter],DIO_VOLT_HIGH); /*< switch this row pin to "high volt" again */
	}
	return error;
     902:	8b 2d       	mov	r24, r11
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
     914:	bf 90       	pop	r11
     916:	af 90       	pop	r10
     918:	9f 90       	pop	r9
     91a:	08 95       	ret

0000091c <LCD_EN_Pulse>:
	}
	else if ((num & 0x0F)>9)
	{
		LCD_WriteCh(copy_u8_LCD_ID,(num & 0x0F)-10+'A'); /**< Write the lower nibble of the number to the LCD display as a hexadecimal character (A-F). */
	}
}
     91c:	cf 93       	push	r28
     91e:	2d e0       	ldi	r18, 0x0D	; 13
     920:	82 9f       	mul	r24, r18
     922:	c0 01       	movw	r24, r0
     924:	11 24       	eor	r1, r1
     926:	fc 01       	movw	r30, r24
     928:	e8 55       	subi	r30, 0x58	; 88
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	c4 81       	ldd	r28, Z+4	; 0x04
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	8c 2f       	mov	r24, r28
     932:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	8a 95       	dec	r24
     93a:	f1 f7       	brne	.-4      	; 0x938 <LCD_EN_Pulse+0x1c>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <LCD_EN_Pulse+0x22>
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	8c 2f       	mov	r24, r28
     942:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
     946:	22 e0       	ldi	r18, 0x02	; 2
     948:	2a 95       	dec	r18
     94a:	f1 f7       	brne	.-4      	; 0x948 <LCD_EN_Pulse+0x2c>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <LCD_EN_Pulse+0x32>
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <LCD_WriteCMD>:
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	f8 2e       	mov	r15, r24
     962:	06 2f       	mov	r16, r22
     964:	c8 2f       	mov	r28, r24
     966:	d0 e0       	ldi	r29, 0x00	; 0
     968:	2d e0       	ldi	r18, 0x0D	; 13
     96a:	2c 9f       	mul	r18, r28
     96c:	c0 01       	movw	r24, r0
     96e:	2d 9f       	mul	r18, r29
     970:	90 0d       	add	r25, r0
     972:	11 24       	eor	r1, r1
     974:	9c 01       	movw	r18, r24
     976:	28 55       	subi	r18, 0x58	; 88
     978:	3f 4f       	sbci	r19, 0xFF	; 255
     97a:	69 01       	movw	r12, r18
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	f9 01       	movw	r30, r18
     980:	83 81       	ldd	r24, Z+3	; 0x03
     982:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
     986:	f6 01       	movw	r30, r12
     988:	80 81       	ld	r24, Z
     98a:	80 31       	cpi	r24, 0x10	; 16
     98c:	01 f5       	brne	.+64     	; 0x9ce <LCD_WriteCMD+0x7c>
     98e:	18 c0       	rjmp	.+48     	; 0x9c0 <LCD_WriteCMD+0x6e>
     990:	60 2f       	mov	r22, r16
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	01 2e       	mov	r0, r17
     996:	02 c0       	rjmp	.+4      	; 0x99c <LCD_WriteCMD+0x4a>
     998:	75 95       	asr	r23
     99a:	67 95       	ror	r22
     99c:	0a 94       	dec	r0
     99e:	e2 f7       	brpl	.-8      	; 0x998 <LCD_WriteCMD+0x46>
     9a0:	8d e0       	ldi	r24, 0x0D	; 13
     9a2:	8c 9f       	mul	r24, r28
     9a4:	f0 01       	movw	r30, r0
     9a6:	8d 9f       	mul	r24, r29
     9a8:	f0 0d       	add	r31, r0
     9aa:	11 24       	eor	r1, r1
     9ac:	e8 55       	subi	r30, 0x58	; 88
     9ae:	ff 4f       	sbci	r31, 0xFF	; 255
     9b0:	e1 0f       	add	r30, r17
     9b2:	f1 1d       	adc	r31, r1
     9b4:	61 70       	andi	r22, 0x01	; 1
     9b6:	85 81       	ldd	r24, Z+5	; 0x05
     9b8:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
     9bc:	1f 5f       	subi	r17, 0xFF	; 255
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <LCD_WriteCMD+0x70>
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	18 30       	cpi	r17, 0x08	; 8
     9c4:	28 f3       	brcs	.-54     	; 0x990 <LCD_WriteCMD+0x3e>
     9c6:	8f 2d       	mov	r24, r15
     9c8:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_EN_Pulse>
     9cc:	44 c0       	rjmp	.+136    	; 0xa56 <LCD_WriteCMD+0x104>
     9ce:	88 23       	and	r24, r24
     9d0:	f1 f0       	breq	.+60     	; 0xa0e <LCD_WriteCMD+0xbc>
     9d2:	41 c0       	rjmp	.+130    	; 0xa56 <LCD_WriteCMD+0x104>
     9d4:	81 2f       	mov	r24, r17
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	9c 01       	movw	r18, r24
     9da:	2c 5f       	subi	r18, 0xFC	; 252
     9dc:	3f 4f       	sbci	r19, 0xFF	; 255
     9de:	60 2f       	mov	r22, r16
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <LCD_WriteCMD+0x96>
     9e4:	75 95       	asr	r23
     9e6:	67 95       	ror	r22
     9e8:	2a 95       	dec	r18
     9ea:	e2 f7       	brpl	.-8      	; 0x9e4 <LCD_WriteCMD+0x92>
     9ec:	4d e0       	ldi	r20, 0x0D	; 13
     9ee:	4c 9f       	mul	r20, r28
     9f0:	90 01       	movw	r18, r0
     9f2:	4d 9f       	mul	r20, r29
     9f4:	30 0d       	add	r19, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	28 55       	subi	r18, 0x58	; 88
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	f9 01       	movw	r30, r18
     9fe:	e8 0f       	add	r30, r24
     a00:	f9 1f       	adc	r31, r25
     a02:	61 70       	andi	r22, 0x01	; 1
     a04:	85 81       	ldd	r24, Z+5	; 0x05
     a06:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
     a0a:	1f 5f       	subi	r17, 0xFF	; 255
     a0c:	01 c0       	rjmp	.+2      	; 0xa10 <LCD_WriteCMD+0xbe>
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	14 30       	cpi	r17, 0x04	; 4
     a12:	00 f3       	brcs	.-64     	; 0x9d4 <LCD_WriteCMD+0x82>
     a14:	8f 2d       	mov	r24, r15
     a16:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_EN_Pulse>
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	17 c0       	rjmp	.+46     	; 0xa4c <LCD_WriteCMD+0xfa>
     a1e:	60 2f       	mov	r22, r16
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	01 2e       	mov	r0, r17
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <LCD_WriteCMD+0xd8>
     a26:	75 95       	asr	r23
     a28:	67 95       	ror	r22
     a2a:	0a 94       	dec	r0
     a2c:	e2 f7       	brpl	.-8      	; 0xa26 <LCD_WriteCMD+0xd4>
     a2e:	8d e0       	ldi	r24, 0x0D	; 13
     a30:	8c 9f       	mul	r24, r28
     a32:	f0 01       	movw	r30, r0
     a34:	8d 9f       	mul	r24, r29
     a36:	f0 0d       	add	r31, r0
     a38:	11 24       	eor	r1, r1
     a3a:	e8 55       	subi	r30, 0x58	; 88
     a3c:	ff 4f       	sbci	r31, 0xFF	; 255
     a3e:	e1 0f       	add	r30, r17
     a40:	f1 1d       	adc	r31, r1
     a42:	61 70       	andi	r22, 0x01	; 1
     a44:	85 81       	ldd	r24, Z+5	; 0x05
     a46:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
     a4a:	1f 5f       	subi	r17, 0xFF	; 255
     a4c:	14 30       	cpi	r17, 0x04	; 4
     a4e:	38 f3       	brcs	.-50     	; 0xa1e <LCD_WriteCMD+0xcc>
     a50:	8f 2d       	mov	r24, r15
     a52:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_EN_Pulse>
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	08 95       	ret

00000a66 <LCD_WriteData>:
     a66:	cf 92       	push	r12
     a68:	df 92       	push	r13
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	f8 2e       	mov	r15, r24
     a76:	06 2f       	mov	r16, r22
     a78:	c8 2f       	mov	r28, r24
     a7a:	d0 e0       	ldi	r29, 0x00	; 0
     a7c:	2d e0       	ldi	r18, 0x0D	; 13
     a7e:	2c 9f       	mul	r18, r28
     a80:	c0 01       	movw	r24, r0
     a82:	2d 9f       	mul	r18, r29
     a84:	90 0d       	add	r25, r0
     a86:	11 24       	eor	r1, r1
     a88:	9c 01       	movw	r18, r24
     a8a:	28 55       	subi	r18, 0x58	; 88
     a8c:	3f 4f       	sbci	r19, 0xFF	; 255
     a8e:	69 01       	movw	r12, r18
     a90:	61 e0       	ldi	r22, 0x01	; 1
     a92:	f9 01       	movw	r30, r18
     a94:	83 81       	ldd	r24, Z+3	; 0x03
     a96:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
     a9a:	f6 01       	movw	r30, r12
     a9c:	80 81       	ld	r24, Z
     a9e:	80 31       	cpi	r24, 0x10	; 16
     aa0:	01 f5       	brne	.+64     	; 0xae2 <LCD_WriteData+0x7c>
     aa2:	18 c0       	rjmp	.+48     	; 0xad4 <LCD_WriteData+0x6e>
     aa4:	60 2f       	mov	r22, r16
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	01 2e       	mov	r0, r17
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <LCD_WriteData+0x4a>
     aac:	75 95       	asr	r23
     aae:	67 95       	ror	r22
     ab0:	0a 94       	dec	r0
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <LCD_WriteData+0x46>
     ab4:	8d e0       	ldi	r24, 0x0D	; 13
     ab6:	8c 9f       	mul	r24, r28
     ab8:	f0 01       	movw	r30, r0
     aba:	8d 9f       	mul	r24, r29
     abc:	f0 0d       	add	r31, r0
     abe:	11 24       	eor	r1, r1
     ac0:	e8 55       	subi	r30, 0x58	; 88
     ac2:	ff 4f       	sbci	r31, 0xFF	; 255
     ac4:	e1 0f       	add	r30, r17
     ac6:	f1 1d       	adc	r31, r1
     ac8:	61 70       	andi	r22, 0x01	; 1
     aca:	85 81       	ldd	r24, Z+5	; 0x05
     acc:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
     ad0:	1f 5f       	subi	r17, 0xFF	; 255
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <LCD_WriteData+0x70>
     ad4:	10 e0       	ldi	r17, 0x00	; 0
     ad6:	18 30       	cpi	r17, 0x08	; 8
     ad8:	28 f3       	brcs	.-54     	; 0xaa4 <LCD_WriteData+0x3e>
     ada:	8f 2d       	mov	r24, r15
     adc:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_EN_Pulse>
     ae0:	44 c0       	rjmp	.+136    	; 0xb6a <LCD_WriteData+0x104>
     ae2:	88 23       	and	r24, r24
     ae4:	f1 f0       	breq	.+60     	; 0xb22 <LCD_WriteData+0xbc>
     ae6:	41 c0       	rjmp	.+130    	; 0xb6a <LCD_WriteData+0x104>
     ae8:	81 2f       	mov	r24, r17
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	9c 01       	movw	r18, r24
     aee:	2c 5f       	subi	r18, 0xFC	; 252
     af0:	3f 4f       	sbci	r19, 0xFF	; 255
     af2:	60 2f       	mov	r22, r16
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	02 c0       	rjmp	.+4      	; 0xafc <LCD_WriteData+0x96>
     af8:	75 95       	asr	r23
     afa:	67 95       	ror	r22
     afc:	2a 95       	dec	r18
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <LCD_WriteData+0x92>
     b00:	4d e0       	ldi	r20, 0x0D	; 13
     b02:	4c 9f       	mul	r20, r28
     b04:	90 01       	movw	r18, r0
     b06:	4d 9f       	mul	r20, r29
     b08:	30 0d       	add	r19, r0
     b0a:	11 24       	eor	r1, r1
     b0c:	28 55       	subi	r18, 0x58	; 88
     b0e:	3f 4f       	sbci	r19, 0xFF	; 255
     b10:	f9 01       	movw	r30, r18
     b12:	e8 0f       	add	r30, r24
     b14:	f9 1f       	adc	r31, r25
     b16:	61 70       	andi	r22, 0x01	; 1
     b18:	85 81       	ldd	r24, Z+5	; 0x05
     b1a:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
     b1e:	1f 5f       	subi	r17, 0xFF	; 255
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <LCD_WriteData+0xbe>
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	14 30       	cpi	r17, 0x04	; 4
     b26:	00 f3       	brcs	.-64     	; 0xae8 <LCD_WriteData+0x82>
     b28:	8f 2d       	mov	r24, r15
     b2a:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_EN_Pulse>
     b2e:	10 e0       	ldi	r17, 0x00	; 0
     b30:	17 c0       	rjmp	.+46     	; 0xb60 <LCD_WriteData+0xfa>
     b32:	60 2f       	mov	r22, r16
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	01 2e       	mov	r0, r17
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <LCD_WriteData+0xd8>
     b3a:	75 95       	asr	r23
     b3c:	67 95       	ror	r22
     b3e:	0a 94       	dec	r0
     b40:	e2 f7       	brpl	.-8      	; 0xb3a <LCD_WriteData+0xd4>
     b42:	8d e0       	ldi	r24, 0x0D	; 13
     b44:	8c 9f       	mul	r24, r28
     b46:	f0 01       	movw	r30, r0
     b48:	8d 9f       	mul	r24, r29
     b4a:	f0 0d       	add	r31, r0
     b4c:	11 24       	eor	r1, r1
     b4e:	e8 55       	subi	r30, 0x58	; 88
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	e1 0f       	add	r30, r17
     b54:	f1 1d       	adc	r31, r1
     b56:	61 70       	andi	r22, 0x01	; 1
     b58:	85 81       	ldd	r24, Z+5	; 0x05
     b5a:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
     b5e:	1f 5f       	subi	r17, 0xFF	; 255
     b60:	14 30       	cpi	r17, 0x04	; 4
     b62:	38 f3       	brcs	.-50     	; 0xb32 <LCD_WriteData+0xcc>
     b64:	8f 2d       	mov	r24, r15
     b66:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_EN_Pulse>
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	df 90       	pop	r13
     b76:	cf 90       	pop	r12
     b78:	08 95       	ret

00000b7a <LCD_voidSetOption>:
     b7a:	64 30       	cpi	r22, 0x04	; 4
     b7c:	50 f4       	brcc	.+20     	; 0xb92 <LCD_voidSetOption+0x18>
     b7e:	64 60       	ori	r22, 0x04	; 4
     b80:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     b84:	8f ec       	ldi	r24, 0xCF	; 207
     b86:	97 e0       	ldi	r25, 0x07	; 7
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <LCD_voidSetOption+0xe>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <LCD_voidSetOption+0x14>
     b8e:	00 00       	nop
     b90:	08 95       	ret
     b92:	9c ef       	ldi	r25, 0xFC	; 252
     b94:	96 0f       	add	r25, r22
     b96:	94 30       	cpi	r25, 0x04	; 4
     b98:	88 f4       	brcc	.+34     	; 0xbbc <LCD_voidSetOption+0x42>
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	64 50       	subi	r22, 0x04	; 4
     b9e:	71 09       	sbc	r23, r1
     ba0:	66 0f       	add	r22, r22
     ba2:	77 1f       	adc	r23, r23
     ba4:	66 0f       	add	r22, r22
     ba6:	77 1f       	adc	r23, r23
     ba8:	60 61       	ori	r22, 0x10	; 16
     baa:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     bae:	8f ec       	ldi	r24, 0xCF	; 207
     bb0:	97 e0       	ldi	r25, 0x07	; 7
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <LCD_voidSetOption+0x38>
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <LCD_voidSetOption+0x3e>
     bb8:	00 00       	nop
     bba:	08 95       	ret
     bbc:	98 ef       	ldi	r25, 0xF8	; 248
     bbe:	96 0f       	add	r25, r22
     bc0:	96 30       	cpi	r25, 0x06	; 6
     bc2:	30 f5       	brcc	.+76     	; 0xc10 <LCD_voidSetOption+0x96>
     bc4:	e8 2f       	mov	r30, r24
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	e0 52       	subi	r30, 0x20	; 32
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	60 81       	ld	r22, Z
     bce:	46 2f       	mov	r20, r22
     bd0:	48 60       	ori	r20, 0x08	; 8
     bd2:	59 2f       	mov	r21, r25
     bd4:	56 95       	lsr	r21
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	05 2e       	mov	r0, r21
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <LCD_voidSetOption+0x68>
     bde:	66 0f       	add	r22, r22
     be0:	77 1f       	adc	r23, r23
     be2:	0a 94       	dec	r0
     be4:	e2 f7       	brpl	.-8      	; 0xbde <LCD_voidSetOption+0x64>
     be6:	29 2f       	mov	r18, r25
     be8:	21 70       	andi	r18, 0x01	; 1
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <LCD_voidSetOption+0x78>
     bee:	22 0f       	add	r18, r18
     bf0:	33 1f       	adc	r19, r19
     bf2:	5a 95       	dec	r21
     bf4:	e2 f7       	brpl	.-8      	; 0xbee <LCD_voidSetOption+0x74>
     bf6:	60 95       	com	r22
     bf8:	64 23       	and	r22, r20
     bfa:	62 2b       	or	r22, r18
     bfc:	60 83       	st	Z, r22
     bfe:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     c02:	8f ec       	ldi	r24, 0xCF	; 207
     c04:	97 e0       	ldi	r25, 0x07	; 7
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <LCD_voidSetOption+0x8c>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <LCD_voidSetOption+0x92>
     c0c:	00 00       	nop
     c0e:	08 95       	ret
     c10:	64 31       	cpi	r22, 0x14	; 20
     c12:	51 f4       	brne	.+20     	; 0xc28 <LCD_voidSetOption+0xae>
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     c1a:	8f e9       	ldi	r24, 0x9F	; 159
     c1c:	9f e0       	ldi	r25, 0x0F	; 15
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <LCD_voidSetOption+0xa4>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <LCD_voidSetOption+0xaa>
     c24:	00 00       	nop
     c26:	08 95       	ret
     c28:	65 31       	cpi	r22, 0x15	; 21
     c2a:	49 f4       	brne	.+18     	; 0xc3e <LCD_voidSetOption+0xc4>
     c2c:	62 e0       	ldi	r22, 0x02	; 2
     c2e:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     c32:	8f e9       	ldi	r24, 0x9F	; 159
     c34:	9f e0       	ldi	r25, 0x0F	; 15
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <LCD_voidSetOption+0xbc>
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <LCD_voidSetOption+0xc2>
     c3c:	00 00       	nop
     c3e:	08 95       	ret

00000c40 <LCD_init>:
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	18 2f       	mov	r17, r24
     c4a:	2f e7       	ldi	r18, 0x7F	; 127
     c4c:	88 e3       	ldi	r24, 0x38	; 56
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	21 50       	subi	r18, 0x01	; 1
     c52:	80 40       	sbci	r24, 0x00	; 0
     c54:	90 40       	sbci	r25, 0x00	; 0
     c56:	e1 f7       	brne	.-8      	; 0xc50 <LCD_init+0x10>
     c58:	00 c0       	rjmp	.+0      	; 0xc5a <LCD_init+0x1a>
     c5a:	00 00       	nop
     c5c:	c1 2f       	mov	r28, r17
     c5e:	d0 e0       	ldi	r29, 0x00	; 0
     c60:	8d e0       	ldi	r24, 0x0D	; 13
     c62:	8c 9f       	mul	r24, r28
     c64:	f0 01       	movw	r30, r0
     c66:	8d 9f       	mul	r24, r29
     c68:	f0 0d       	add	r31, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	e8 55       	subi	r30, 0x58	; 88
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	00 81       	ld	r16, Z
     c72:	01 11       	cpse	r16, r1
     c74:	0a c0       	rjmp	.+20     	; 0xc8a <LCD_init+0x4a>
     c76:	62 e0       	ldi	r22, 0x02	; 2
     c78:	81 2f       	mov	r24, r17
     c7a:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     c7e:	8f ec       	ldi	r24, 0xCF	; 207
     c80:	97 e0       	ldi	r25, 0x07	; 7
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <LCD_init+0x42>
     c86:	00 c0       	rjmp	.+0      	; 0xc88 <LCD_init+0x48>
     c88:	00 00       	nop
     c8a:	8d e0       	ldi	r24, 0x0D	; 13
     c8c:	8c 9f       	mul	r24, r28
     c8e:	f0 01       	movw	r30, r0
     c90:	8d 9f       	mul	r24, r29
     c92:	f0 0d       	add	r31, r0
     c94:	11 24       	eor	r1, r1
     c96:	e8 55       	subi	r30, 0x58	; 88
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	61 81       	ldd	r22, Z+1	; 0x01
     c9c:	82 81       	ldd	r24, Z+2	; 0x02
     c9e:	60 2b       	or	r22, r16
     ca0:	68 2b       	or	r22, r24
     ca2:	60 62       	ori	r22, 0x20	; 32
     ca4:	81 2f       	mov	r24, r17
     ca6:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     caa:	8f ec       	ldi	r24, 0xCF	; 207
     cac:	97 e0       	ldi	r25, 0x07	; 7
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <LCD_init+0x6e>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <LCD_init+0x74>
     cb4:	00 00       	nop
     cb6:	c0 52       	subi	r28, 0x20	; 32
     cb8:	de 4f       	sbci	r29, 0xFE	; 254
     cba:	68 81       	ld	r22, Y
     cbc:	6c 60       	ori	r22, 0x0C	; 12
     cbe:	68 83       	st	Y, r22
     cc0:	81 2f       	mov	r24, r17
     cc2:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     cc6:	8f ec       	ldi	r24, 0xCF	; 207
     cc8:	97 e0       	ldi	r25, 0x07	; 7
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <LCD_init+0x8a>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <LCD_init+0x90>
     cd0:	00 00       	nop
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	81 2f       	mov	r24, r17
     cd6:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     cda:	8f e9       	ldi	r24, 0x9F	; 159
     cdc:	9f e0       	ldi	r25, 0x0F	; 15
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <LCD_init+0x9e>
     ce2:	00 c0       	rjmp	.+0      	; 0xce4 <LCD_init+0xa4>
     ce4:	00 00       	nop
     ce6:	66 e0       	ldi	r22, 0x06	; 6
     ce8:	81 2f       	mov	r24, r17
     cea:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     cee:	8f ec       	ldi	r24, 0xCF	; 207
     cf0:	97 e0       	ldi	r25, 0x07	; 7
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <LCD_init+0xb2>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <LCD_init+0xb8>
     cf8:	00 00       	nop
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <LCD_WriteCh>:
     d04:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_WriteData>
     d08:	8d e6       	ldi	r24, 0x6D	; 109
     d0a:	8a 95       	dec	r24
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <LCD_WriteCh+0x6>
     d0e:	00 00       	nop
     d10:	08 95       	ret

00000d12 <LCD_WriteStr>:
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	d8 2f       	mov	r29, r24
     d1c:	8b 01       	movw	r16, r22
     d1e:	c0 e0       	ldi	r28, 0x00	; 0
     d20:	04 c0       	rjmp	.+8      	; 0xd2a <LCD_WriteStr+0x18>
     d22:	8d 2f       	mov	r24, r29
     d24:	0e 94 82 06 	call	0xd04	; 0xd04 <LCD_WriteCh>
     d28:	cf 5f       	subi	r28, 0xFF	; 255
     d2a:	f8 01       	movw	r30, r16
     d2c:	ec 0f       	add	r30, r28
     d2e:	f1 1d       	adc	r31, r1
     d30:	60 81       	ld	r22, Z
     d32:	61 11       	cpse	r22, r1
     d34:	f6 cf       	rjmp	.-20     	; 0xd22 <LCD_WriteStr+0x10>
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	08 95       	ret

00000d40 <LCD_SetCursor>:
void LCD_SetCursor(u8 copy_u8_LCD_ID,u8 line,u8 cell)
{
	/*
		Set DDRAM Address:0 0     1 AC6 AC5 AC4 AC3 AC2 AC1 AC0
	*/
	switch (line)
     d40:	62 30       	cpi	r22, 0x02	; 2
     d42:	91 f0       	breq	.+36     	; 0xd68 <LCD_SetCursor+0x28>
     d44:	18 f4       	brcc	.+6      	; 0xd4c <LCD_SetCursor+0xc>
     d46:	61 30       	cpi	r22, 0x01	; 1
     d48:	31 f0       	breq	.+12     	; 0xd56 <LCD_SetCursor+0x16>
     d4a:	08 95       	ret
     d4c:	63 30       	cpi	r22, 0x03	; 3
     d4e:	a9 f0       	breq	.+42     	; 0xd7a <LCD_SetCursor+0x3a>
     d50:	64 30       	cpi	r22, 0x04	; 4
     d52:	e1 f0       	breq	.+56     	; 0xd8c <LCD_SetCursor+0x4c>
     d54:	08 95       	ret
	{
		case 1    :
				  LCD_WriteCMD(copy_u8_LCD_ID,LCD_DDRAM_Address+LCD_DDRAM_Address_1ndLine+(cell-1)); /**< Set the cursor position to the specified line and cell on the LCD. */
     d56:	6f e7       	ldi	r22, 0x7F	; 127
     d58:	64 0f       	add	r22, r20
     d5a:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d5e:	8d e6       	ldi	r24, 0x6D	; 109
     d60:	8a 95       	dec	r24
     d62:	f1 f7       	brne	.-4      	; 0xd60 <LCD_SetCursor+0x20>
     d64:	00 00       	nop
     d66:	08 95       	ret
				  _delay_us(41); /**<Delay.*/ 
		break;
		
		case 2    :
				  LCD_WriteCMD(copy_u8_LCD_ID,LCD_DDRAM_Address+LCD_DDRAM_Address_2ndLine+(cell-1)); /**< Set the cursor position to the specified line and cell on the LCD. */
     d68:	6f eb       	ldi	r22, 0xBF	; 191
     d6a:	64 0f       	add	r22, r20
     d6c:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     d70:	8d e6       	ldi	r24, 0x6D	; 109
     d72:	8a 95       	dec	r24
     d74:	f1 f7       	brne	.-4      	; 0xd72 <LCD_SetCursor+0x32>
     d76:	00 00       	nop
     d78:	08 95       	ret
				  _delay_us(41); /**<Delay.*/
		break;

		case 3    :
				  LCD_WriteCMD(copy_u8_LCD_ID,LCD_DDRAM_Address+LCD_DDRAM_Address_3rdLine+(cell-1)); /**< Set the cursor position to the specified line and cell on the LCD. */
     d7a:	63 e9       	ldi	r22, 0x93	; 147
     d7c:	64 0f       	add	r22, r20
     d7e:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     d82:	8d e6       	ldi	r24, 0x6D	; 109
     d84:	8a 95       	dec	r24
     d86:	f1 f7       	brne	.-4      	; 0xd84 <LCD_SetCursor+0x44>
     d88:	00 00       	nop
     d8a:	08 95       	ret
				  _delay_us(41); /**<Delay.*/
		break;

		case 4    :
				  LCD_WriteCMD(copy_u8_LCD_ID,LCD_DDRAM_Address+LCD_DDRAM_Address_4thLine+(cell-1)); /**< Set the cursor position to the specified line and cell on the LCD. */
     d8c:	63 ed       	ldi	r22, 0xD3	; 211
     d8e:	64 0f       	add	r22, r20
     d90:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteCMD>
     d94:	8d e6       	ldi	r24, 0x6D	; 109
     d96:	8a 95       	dec	r24
     d98:	f1 f7       	brne	.-4      	; 0xd96 <LCD_SetCursor+0x56>
     d9a:	00 00       	nop
     d9c:	08 95       	ret

00000d9e <system_timerOvf>:
	}
	
}
void system_timerOvf(void)
{
	TIMER1_SetCounterValue((u16)65536-31250);
     d9e:	8e ee       	ldi	r24, 0xEE	; 238
     da0:	95 e8       	ldi	r25, 0x85	; 133
     da2:	9d bd       	out	0x2d, r25	; 45
     da4:	8c bd       	out	0x2c, r24	; 44
	if (opTime>0)
     da6:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <opTime>
     daa:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <opTime+0x1>
     dae:	89 2b       	or	r24, r25
     db0:	61 f0       	breq	.+24     	; 0xdca <system_timerOvf+0x2c>
	{
		opTime--;
     db2:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <opTime>
     db6:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <opTime+0x1>
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <opTime+0x1>
     dc0:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <opTime>
		isTimerUpdateNeeded=STD_TRUE;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <isTimerUpdateNeeded>
     dca:	08 95       	ret

00000dcc <displayStatus>:
/*                                */
/*      DISPLAY FUNCTIONS         */
/*                                */
/*--------------------------------*/
void displayStatus(DISPLAY_t display)
{
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	c8 2f       	mov	r28, r24
	u8 i;
	if ( (display>=DISPLAY_DOOR_OPENED)&&(display<=DISPLAY_TIMER_NOT_ADJUSTED))
     dd2:	85 30       	cpi	r24, 0x05	; 5
     dd4:	78 f1       	brcs	.+94     	; 0xe34 <displayStatus+0x68>
     dd6:	32 c0       	rjmp	.+100    	; 0xe3c <displayStatus+0x70>
	{
		//"    Door Opened     " , "     Put Food       " , "       RESET        " , "        DONE        " , " Timer Not Adjusted "
		for (i=0 ; i<2 ;i++ )
		{
			//clear
			LCD_SetCursor(LCD_ID1,DISPLAY_STRING_ROW,DISPLAY_STRING_COL);
     dd8:	41 e0       	ldi	r20, 0x01	; 1
     dda:	64 e0       	ldi	r22, 0x04	; 4
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_SetCursor>
			LCD_WriteStr(LCD_ID1,(u8*)DISPLAY_EMPTY_LINE);
     de2:	62 ec       	ldi	r22, 0xC2	; 194
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	0e 94 89 06 	call	0xd12	; 0xd12 <LCD_WriteStr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dec:	2f eb       	ldi	r18, 0xBF	; 191
     dee:	87 e2       	ldi	r24, 0x27	; 39
     df0:	99 e0       	ldi	r25, 0x09	; 9
     df2:	21 50       	subi	r18, 0x01	; 1
     df4:	80 40       	sbci	r24, 0x00	; 0
     df6:	90 40       	sbci	r25, 0x00	; 0
     df8:	e1 f7       	brne	.-8      	; 0xdf2 <displayStatus+0x26>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <displayStatus+0x30>
     dfc:	00 00       	nop
			
			_delay_ms(DISPLAY_BLINK_DELAY/2);
			//display
			LCD_SetCursor(LCD_ID1,DISPLAY_STRING_ROW,DISPLAY_STRING_COL);
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	64 e0       	ldi	r22, 0x04	; 4
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_SetCursor>
			LCD_WriteStr(LCD_ID1,(u8*)displayString[display]);
     e08:	ec 2f       	mov	r30, r28
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	ee 0f       	add	r30, r30
     e0e:	ff 1f       	adc	r31, r31
     e10:	ed 59       	subi	r30, 0x9D	; 157
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	60 81       	ld	r22, Z
     e16:	71 81       	ldd	r23, Z+1	; 0x01
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	0e 94 89 06 	call	0xd12	; 0xd12 <LCD_WriteStr>
     e1e:	2f e7       	ldi	r18, 0x7F	; 127
     e20:	8f e4       	ldi	r24, 0x4F	; 79
     e22:	92 e1       	ldi	r25, 0x12	; 18
     e24:	21 50       	subi	r18, 0x01	; 1
     e26:	80 40       	sbci	r24, 0x00	; 0
     e28:	90 40       	sbci	r25, 0x00	; 0
     e2a:	e1 f7       	brne	.-8      	; 0xe24 <displayStatus+0x58>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <displayStatus+0x62>
     e2e:	00 00       	nop
{
	u8 i;
	if ( (display>=DISPLAY_DOOR_OPENED)&&(display<=DISPLAY_TIMER_NOT_ADJUSTED))
	{
		//"    Door Opened     " , "     Put Food       " , "       RESET        " , "        DONE        " , " Timer Not Adjusted "
		for (i=0 ; i<2 ;i++ )
     e30:	df 5f       	subi	r29, 0xFF	; 255
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <displayStatus+0x6a>
     e34:	d0 e0       	ldi	r29, 0x00	; 0
     e36:	d2 30       	cpi	r29, 0x02	; 2
     e38:	78 f2       	brcs	.-98     	; 0xdd8 <displayStatus+0xc>
     e3a:	27 c0       	rjmp	.+78     	; 0xe8a <displayStatus+0xbe>
			LCD_WriteStr(LCD_ID1,(u8*)displayString[display]);
			
			_delay_ms(DISPLAY_BLINK_DELAY);
		}
	}
	else if ((display>=DISPLAY_SET_TIMER_PLEASE)&&(display<=DISPLAY_PAUSED))
     e3c:	8b ef       	ldi	r24, 0xFB	; 251
     e3e:	8c 0f       	add	r24, r28
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	18 f5       	brcc	.+70     	; 0xe8a <displayStatus+0xbe>
	{
		// "   Set Timer Please ", "      RUNNING       ",  "      PAUSED        "
		LCD_SetCursor(LCD_ID1,DISPLAY_STRING_ROW,DISPLAY_STRING_COL);
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	64 e0       	ldi	r22, 0x04	; 4
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_SetCursor>
		LCD_WriteStr(LCD_ID1,(u8*)DISPLAY_EMPTY_LINE);
     e4e:	62 ec       	ldi	r22, 0xC2	; 194
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	0e 94 89 06 	call	0xd12	; 0xd12 <LCD_WriteStr>
		LCD_SetCursor(LCD_ID1,DISPLAY_STRING_ROW,DISPLAY_STRING_COL);
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	64 e0       	ldi	r22, 0x04	; 4
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_SetCursor>
		LCD_WriteStr(LCD_ID1,(u8*)displayString[display]);
     e62:	ec 2f       	mov	r30, r28
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	ed 59       	subi	r30, 0x9D	; 157
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	60 81       	ld	r22, Z
     e70:	71 81       	ldd	r23, Z+1	; 0x01
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	0e 94 89 06 	call	0xd12	; 0xd12 <LCD_WriteStr>
     e78:	2f ef       	ldi	r18, 0xFF	; 255
     e7a:	84 e3       	ldi	r24, 0x34	; 52
     e7c:	9c e0       	ldi	r25, 0x0C	; 12
     e7e:	21 50       	subi	r18, 0x01	; 1
     e80:	80 40       	sbci	r24, 0x00	; 0
     e82:	90 40       	sbci	r25, 0x00	; 0
     e84:	e1 f7       	brne	.-8      	; 0xe7e <displayStatus+0xb2>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <displayStatus+0xbc>
     e88:	00 00       	nop
	else if (display==DISPLAY_NO_TRANSACTION)
	{
		//do nothing
	}
	
}
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <timeDisplay>:
	
}
void timeDisplay(void)
{
	// clear
	LCD_SetCursor(LCD_ID1,DISPLAY_TIMER_ROW,DISPLAY_TIMER_COL);
     e90:	48 e0       	ldi	r20, 0x08	; 8
     e92:	63 e0       	ldi	r22, 0x03	; 3
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_SetCursor>
	LCD_WriteStr(LCD_ID1,(u8*)DISPLAY_EMPTY_LINE);
     e9a:	62 ec       	ldi	r22, 0xC2	; 194
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	0e 94 89 06 	call	0xd12	; 0xd12 <LCD_WriteStr>
	
	//diplay
	LCD_SetCursor(LCD_ID1,DISPLAY_TIMER_ROW,DISPLAY_TIMER_COL);
     ea4:	48 e0       	ldi	r20, 0x08	; 8
     ea6:	63 e0       	ldi	r22, 0x03	; 3
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_SetCursor>
	LCD_WriteCh(LCD_ID1,minuteTens);
     eae:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <minuteTens>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	0e 94 82 06 	call	0xd04	; 0xd04 <LCD_WriteCh>
	LCD_WriteCh(LCD_ID1,minuteUnits);
     eb8:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <minuteUnits>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	0e 94 82 06 	call	0xd04	; 0xd04 <LCD_WriteCh>
	LCD_WriteCh(LCD_ID1,':');
     ec2:	6a e3       	ldi	r22, 0x3A	; 58
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	0e 94 82 06 	call	0xd04	; 0xd04 <LCD_WriteCh>
	LCD_WriteCh(LCD_ID1,secondTens);
     eca:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <secondTens>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	0e 94 82 06 	call	0xd04	; 0xd04 <LCD_WriteCh>
	LCD_WriteCh(LCD_ID1,secondUnits);
     ed4:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <secondUnits>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	0e 94 82 06 	call	0xd04	; 0xd04 <LCD_WriteCh>
     ede:	08 95       	ret

00000ee0 <display_update>:
		//do nothing
	}
	
}
void display_update(DISPLAY_t display)
{
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
	if ( (display>=DISPLAY_DOOR_OPENED)&&(display<=DISPLAY_TIMER_NOT_ADJUSTED))
     ee4:	85 30       	cpi	r24, 0x05	; 5
     ee6:	30 f4       	brcc	.+12     	; 0xef4 <display_update+0x14>
	{
		//"    Door Opened     " , "     Put Food       " , "       RESET        " , "        DONE        " , " Timer Not Adjusted "
		displayStatus(display);
     ee8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <displayStatus>
		isDisplayUpdateNeeded=STD_TRUE;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <isDisplayUpdateNeeded>
     ef2:	d9 c0       	rjmp	.+434    	; 0x10a6 <display_update+0x1c6>
	}
	else if ((display>=DISPLAY_SET_TIMER_PLEASE)&&(display<=DISPLAY_PAUSED))
     ef4:	9b ef       	ldi	r25, 0xFB	; 251
     ef6:	98 0f       	add	r25, r24
     ef8:	93 30       	cpi	r25, 0x03	; 3
     efa:	08 f0       	brcs	.+2      	; 0xefe <display_update+0x1e>
     efc:	d4 c0       	rjmp	.+424    	; 0x10a6 <display_update+0x1c6>
	{
		// "   Set Timer Please ", "      RUNNING       ",  "      PAUSED        "
		switch (currentState)
     efe:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <currentState>
     f02:	91 30       	cpi	r25, 0x01	; 1
     f04:	89 f0       	breq	.+34     	; 0xf28 <display_update+0x48>
     f06:	20 f0       	brcs	.+8      	; 0xf10 <display_update+0x30>
     f08:	92 30       	cpi	r25, 0x02	; 2
     f0a:	09 f4       	brne	.+2      	; 0xf0e <display_update+0x2e>
     f0c:	c3 c0       	rjmp	.+390    	; 0x1094 <display_update+0x1b4>
     f0e:	cb c0       	rjmp	.+406    	; 0x10a6 <display_update+0x1c6>
		{
			case IDLE_OFF_STATE:
			if (isDisplayUpdateNeeded==STD_TRUE)
     f10:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <isDisplayUpdateNeeded>
     f14:	91 30       	cpi	r25, 0x01	; 1
     f16:	09 f0       	breq	.+2      	; 0xf1a <display_update+0x3a>
     f18:	c6 c0       	rjmp	.+396    	; 0x10a6 <display_update+0x1c6>
			{
				isDisplayUpdateNeeded=STD_FALSE;
     f1a:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <isDisplayUpdateNeeded>
				displayStatus(display);//DISPLAY_SET_TIMER_PLEASE
     f1e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <displayStatus>
				timeDisplay();
     f22:	0e 94 48 07 	call	0xe90	; 0xe90 <timeDisplay>
     f26:	bf c0       	rjmp	.+382    	; 0x10a6 <display_update+0x1c6>
			}
			break;
			
			case ON_STATE:
			if (isDisplayUpdateNeeded==STD_TRUE)
     f28:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <isDisplayUpdateNeeded>
     f2c:	91 30       	cpi	r25, 0x01	; 1
     f2e:	21 f4       	brne	.+8      	; 0xf38 <display_update+0x58>
			{
				isDisplayUpdateNeeded=STD_FALSE;
     f30:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <isDisplayUpdateNeeded>
				displayStatus(display); // DISPLAY_RUNNING
     f34:	0e 94 e6 06 	call	0xdcc	; 0xdcc <displayStatus>
			}
			if (isTimerUpdateNeeded==STD_TRUE)
     f38:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <isTimerUpdateNeeded>
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <display_update+0x62>
     f40:	b2 c0       	rjmp	.+356    	; 0x10a6 <display_update+0x1c6>
			{
				isTimerUpdateNeeded=STD_FALSE;
     f42:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <isTimerUpdateNeeded>
				
				// calculate timer digits
				secondUnits= ( ( (u16)opTime%60) % 10)+ '0';
     f46:	c0 91 e3 01 	lds	r28, 0x01E3	; 0x8001e3 <opTime>
     f4a:	d0 91 e4 01 	lds	r29, 0x01E4	; 0x8001e4 <opTime+0x1>
     f4e:	9e 01       	movw	r18, r28
     f50:	a9 e8       	ldi	r26, 0x89	; 137
     f52:	b8 e8       	ldi	r27, 0x88	; 136
     f54:	0e 94 46 0b 	call	0x168c	; 0x168c <__umulhisi3>
     f58:	ac 01       	movw	r20, r24
     f5a:	56 95       	lsr	r21
     f5c:	47 95       	ror	r20
     f5e:	52 95       	swap	r21
     f60:	42 95       	swap	r20
     f62:	4f 70       	andi	r20, 0x0F	; 15
     f64:	45 27       	eor	r20, r21
     f66:	5f 70       	andi	r21, 0x0F	; 15
     f68:	45 27       	eor	r20, r21
     f6a:	ec e3       	ldi	r30, 0x3C	; 60
     f6c:	e4 9f       	mul	r30, r20
     f6e:	c0 01       	movw	r24, r0
     f70:	e5 9f       	mul	r30, r21
     f72:	90 0d       	add	r25, r0
     f74:	11 24       	eor	r1, r1
     f76:	ae 01       	movw	r20, r28
     f78:	48 1b       	sub	r20, r24
     f7a:	59 0b       	sbc	r21, r25
     f7c:	9a 01       	movw	r18, r20
     f7e:	ad ec       	ldi	r26, 0xCD	; 205
     f80:	bc ec       	ldi	r27, 0xCC	; 204
     f82:	0e 94 46 0b 	call	0x168c	; 0x168c <__umulhisi3>
     f86:	96 95       	lsr	r25
     f88:	87 95       	ror	r24
     f8a:	96 95       	lsr	r25
     f8c:	87 95       	ror	r24
     f8e:	96 95       	lsr	r25
     f90:	87 95       	ror	r24
     f92:	9c 01       	movw	r18, r24
     f94:	22 0f       	add	r18, r18
     f96:	33 1f       	adc	r19, r19
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	82 0f       	add	r24, r18
     fa6:	93 1f       	adc	r25, r19
     fa8:	9a 01       	movw	r18, r20
     faa:	28 1b       	sub	r18, r24
     fac:	39 0b       	sbc	r19, r25
     fae:	c9 01       	movw	r24, r18
     fb0:	80 5d       	subi	r24, 0xD0	; 208
     fb2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <secondUnits>
				secondTens=  ( ( (u16)opTime%60) / 10)+ '0';
     fb6:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <opTime>
     fba:	50 91 e4 01 	lds	r21, 0x01E4	; 0x8001e4 <opTime+0x1>
     fbe:	9a 01       	movw	r18, r20
     fc0:	a9 e8       	ldi	r26, 0x89	; 137
     fc2:	b8 e8       	ldi	r27, 0x88	; 136
     fc4:	0e 94 46 0b 	call	0x168c	; 0x168c <__umulhisi3>
     fc8:	9c 01       	movw	r18, r24
     fca:	36 95       	lsr	r19
     fcc:	27 95       	ror	r18
     fce:	32 95       	swap	r19
     fd0:	22 95       	swap	r18
     fd2:	2f 70       	andi	r18, 0x0F	; 15
     fd4:	23 27       	eor	r18, r19
     fd6:	3f 70       	andi	r19, 0x0F	; 15
     fd8:	23 27       	eor	r18, r19
     fda:	e2 9f       	mul	r30, r18
     fdc:	c0 01       	movw	r24, r0
     fde:	e3 9f       	mul	r30, r19
     fe0:	90 0d       	add	r25, r0
     fe2:	11 24       	eor	r1, r1
     fe4:	9a 01       	movw	r18, r20
     fe6:	28 1b       	sub	r18, r24
     fe8:	39 0b       	sbc	r19, r25
     fea:	ad ec       	ldi	r26, 0xCD	; 205
     fec:	bc ec       	ldi	r27, 0xCC	; 204
     fee:	0e 94 46 0b 	call	0x168c	; 0x168c <__umulhisi3>
     ff2:	96 95       	lsr	r25
     ff4:	87 95       	ror	r24
     ff6:	96 95       	lsr	r25
     ff8:	87 95       	ror	r24
     ffa:	96 95       	lsr	r25
     ffc:	87 95       	ror	r24
     ffe:	80 5d       	subi	r24, 0xD0	; 208
    1000:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <secondTens>
				minuteUnits= ( ( (u16)opTime/60) % 10)+ '0';
    1004:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <opTime>
    1008:	30 91 e4 01 	lds	r19, 0x01E4	; 0x8001e4 <opTime+0x1>
    100c:	a9 e8       	ldi	r26, 0x89	; 137
    100e:	b8 e8       	ldi	r27, 0x88	; 136
    1010:	0e 94 46 0b 	call	0x168c	; 0x168c <__umulhisi3>
    1014:	ac 01       	movw	r20, r24
    1016:	56 95       	lsr	r21
    1018:	47 95       	ror	r20
    101a:	52 95       	swap	r21
    101c:	42 95       	swap	r20
    101e:	4f 70       	andi	r20, 0x0F	; 15
    1020:	45 27       	eor	r20, r21
    1022:	5f 70       	andi	r21, 0x0F	; 15
    1024:	45 27       	eor	r20, r21
    1026:	9a 01       	movw	r18, r20
    1028:	ad ec       	ldi	r26, 0xCD	; 205
    102a:	bc ec       	ldi	r27, 0xCC	; 204
    102c:	0e 94 46 0b 	call	0x168c	; 0x168c <__umulhisi3>
    1030:	96 95       	lsr	r25
    1032:	87 95       	ror	r24
    1034:	96 95       	lsr	r25
    1036:	87 95       	ror	r24
    1038:	96 95       	lsr	r25
    103a:	87 95       	ror	r24
    103c:	9c 01       	movw	r18, r24
    103e:	22 0f       	add	r18, r18
    1040:	33 1f       	adc	r19, r19
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	9a 01       	movw	r18, r20
    1054:	28 1b       	sub	r18, r24
    1056:	39 0b       	sbc	r19, r25
    1058:	c9 01       	movw	r24, r18
    105a:	80 5d       	subi	r24, 0xD0	; 208
    105c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <minuteUnits>
				minuteTens=  ( ( (u16)opTime/60) / 10)+ '0';
    1060:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <opTime>
    1064:	30 91 e4 01 	lds	r19, 0x01E4	; 0x8001e4 <opTime+0x1>
    1068:	36 95       	lsr	r19
    106a:	27 95       	ror	r18
    106c:	36 95       	lsr	r19
    106e:	27 95       	ror	r18
    1070:	36 95       	lsr	r19
    1072:	27 95       	ror	r18
    1074:	af e4       	ldi	r26, 0x4F	; 79
    1076:	bb e1       	ldi	r27, 0x1B	; 27
    1078:	0e 94 46 0b 	call	0x168c	; 0x168c <__umulhisi3>
    107c:	96 95       	lsr	r25
    107e:	87 95       	ror	r24
    1080:	96 95       	lsr	r25
    1082:	87 95       	ror	r24
    1084:	96 95       	lsr	r25
    1086:	87 95       	ror	r24
    1088:	80 5d       	subi	r24, 0xD0	; 208
    108a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <minuteTens>
				
				timeDisplay();
    108e:	0e 94 48 07 	call	0xe90	; 0xe90 <timeDisplay>
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <display_update+0x1c6>
			}
			break;
			
			case PAUSE_STATE:
			if (isDisplayUpdateNeeded==STD_TRUE)
    1094:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <isDisplayUpdateNeeded>
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	29 f4       	brne	.+10     	; 0x10a6 <display_update+0x1c6>
			{
				isDisplayUpdateNeeded=STD_FALSE;
    109c:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <isDisplayUpdateNeeded>
				displayStatus(DISPLAY_PAUSED);
    10a0:	87 e0       	ldi	r24, 0x07	; 7
    10a2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <displayStatus>
			break;
		}
		
	}
	
}
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <system_OnOff>:
/*       SYSTEM PROTOTYPES        */
/*                                */
/*--------------------------------*/
void system_OnOff(Std_OnOff_t status)
{
	if (status==STD_ON)
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	e9 f4       	brne	.+58     	; 0x10ea <system_OnOff+0x3e>
	{
		if ( (historyState==PAUSE_STATE) || (historyState==IDLE_OFF_STATE) )
    10b0:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <historyState>
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	11 f0       	breq	.+4      	; 0x10bc <system_OnOff+0x10>
    10b8:	81 11       	cpse	r24, r1
    10ba:	2c c0       	rjmp	.+88     	; 0x1114 <system_OnOff+0x68>
		{
			historyState=ON_STATE;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <historyState>
			
			Dio_WritePin(HEATER,DIO_VOLT_HIGH);
    10c2:	61 e0       	ldi	r22, 0x01	; 1
    10c4:	80 e1       	ldi	r24, 0x10	; 16
    10c6:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
			Dio_WritePin(LAMP,DIO_VOLT_HIGH);
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	81 e1       	ldi	r24, 0x11	; 17
    10ce:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
			Dio_WritePin(MOTOR,DIO_VOLT_HIGH);
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	82 e1       	ldi	r24, 0x12	; 18
    10d6:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
			
			
			TIMER_ONOFF(TIMER1,STD_ON);
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	0e 94 21 02 	call	0x442	; 0x442 <TIMER_ONOFF>
			TIMER1_OVF_INT(STD_ENABLED);
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	0e 94 57 02 	call	0x4ae	; 0x4ae <TIMER1_OVF_INT>
    10e8:	08 95       	ret
		}
	}
	else if (status==STD_OFF)
    10ea:	81 11       	cpse	r24, r1
    10ec:	13 c0       	rjmp	.+38     	; 0x1114 <system_OnOff+0x68>
	{
		Dio_WritePin(HEATER,DIO_VOLT_LOW);
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	80 e1       	ldi	r24, 0x10	; 16
    10f2:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
		Dio_WritePin(LAMP,DIO_VOLT_LOW);
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	81 e1       	ldi	r24, 0x11	; 17
    10fa:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
		Dio_WritePin(MOTOR,DIO_VOLT_LOW);
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	82 e1       	ldi	r24, 0x12	; 18
    1102:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
		
		
		TIMER_ONOFF(TIMER1,STD_OFF);
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	0e 94 21 02 	call	0x442	; 0x442 <TIMER_ONOFF>
		TIMER1_OVF_INT(STD_DISABLED);
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	0e 94 57 02 	call	0x4ae	; 0x4ae <TIMER1_OVF_INT>
    1114:	08 95       	ret

00001116 <system_init>:
		isTimerUpdateNeeded=STD_TRUE;
	}
}
void system_init(void)
{
	Dio_Init();
    1116:	0e 94 b9 0a 	call	0x1572	; 0x1572 <Dio_Init>
	LCD_init(LCD_ID1);
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	0e 94 20 06 	call	0xc40	; 0xc40 <LCD_init>
	
	TIMER1_OVF_SetCallBack(system_timerOvf);
    1120:	8f ec       	ldi	r24, 0xCF	; 207
    1122:	96 e0       	ldi	r25, 0x06	; 6
    1124:	0e 94 62 02 	call	0x4c4	; 0x4c4 <TIMER1_OVF_SetCallBack>
	TIMER1_Init(TIMER1_NORMAL,TIMER_OCx_MODE_DICONNECTED,TIMER_OCx_MODE_DICONNECTED,TIMER_Pre_CLK_256);
    1128:	24 e0       	ldi	r18, 0x04	; 4
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	0e 94 05 02 	call	0x40a	; 0x40a <TIMER1_Init>
	TIMER_ONOFF(TIMER1,STD_OFF);
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	0e 94 21 02 	call	0x442	; 0x442 <TIMER_ONOFF>
	TIMER1_SetCounterValue((u16)65536-31250);
    113c:	8e ee       	ldi	r24, 0xEE	; 238
    113e:	95 e8       	ldi	r25, 0x85	; 133
    1140:	9d bd       	out	0x2d, r25	; 45
    1142:	8c bd       	out	0x2c, r24	; 44
	
	Global_Interrupt_Enable__asm();
    1144:	78 94       	sei
	TIMER1_OVF_INT(STD_DISABLED);
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	0e 94 57 02 	call	0x4ae	; 0x4ae <TIMER1_OVF_INT>
	
	currentState=IDLE_OFF_STATE;
    114c:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <currentState>
	historyState=IDLE_OFF_STATE;
    1150:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <historyState>
	isDisplayUpdateNeeded=STD_TRUE;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <isDisplayUpdateNeeded>
	
	Dio_WritePin(HEATER,DIO_VOLT_LOW);
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	80 e1       	ldi	r24, 0x10	; 16
    115e:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
	Dio_WritePin(LAMP,DIO_VOLT_LOW);
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	81 e1       	ldi	r24, 0x11	; 17
    1166:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>
	Dio_WritePin(MOTOR,DIO_VOLT_LOW);
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	82 e1       	ldi	r24, 0x12	; 18
    116e:	0e 94 00 0b 	call	0x1600	; 0x1600 <Dio_WritePin>

	LCD_voidSetOption(LCD_ID1,LCD_ClearDisplay);
    1172:	64 e1       	ldi	r22, 0x14	; 20
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_voidSetOption>
	LCD_SetCursor(LCD_ID1,1,1);
    117a:	41 e0       	ldi	r20, 0x01	; 1
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_SetCursor>
	LCD_WriteStr(LCD_ID1,(u8*)"     Microwave      ");
    1184:	67 ed       	ldi	r22, 0xD7	; 215
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	0e 94 89 06 	call	0xd12	; 0xd12 <LCD_WriteStr>
	LCD_SetCursor(LCD_ID1,2,1);
    118e:	41 e0       	ldi	r20, 0x01	; 1
    1190:	62 e0       	ldi	r22, 0x02	; 2
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_SetCursor>
	LCD_WriteStr(LCD_ID1,(u8*)"  Abdelrahman Ahmed ");
    1198:	6c ee       	ldi	r22, 0xEC	; 236
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 89 06 	call	0xd12	; 0xd12 <LCD_WriteStr>
    11a2:	08 95       	ret

000011a4 <getTransation>:
/*                                */
/*--------------------------------*/
TRANSATION_t getTransation(void)
{
	TRANSATION_t transation=NO_TRANSATION;
	 if (Dio_ReadPin(STOP_PB)==DIO_VOLT_LOW)
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Dio_ReadPin>
    11aa:	81 11       	cpse	r24, r1
    11ac:	07 c0       	rjmp	.+14     	; 0x11bc <getTransation+0x18>
	{
		while(Dio_ReadPin(STOP_PB)==DIO_VOLT_LOW);
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Dio_ReadPin>
    11b4:	88 23       	and	r24, r24
    11b6:	d9 f3       	breq	.-10     	; 0x11ae <getTransation+0xa>
		transation=CANCEL_EVENT;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	08 95       	ret
	}
	else if (Dio_ReadPin(START_PB)==DIO_VOLT_LOW)
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Dio_ReadPin>
    11c2:	81 11       	cpse	r24, r1
    11c4:	07 c0       	rjmp	.+14     	; 0x11d4 <getTransation+0x30>
	{
		while(Dio_ReadPin(START_PB)==DIO_VOLT_LOW);
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Dio_ReadPin>
    11cc:	88 23       	and	r24, r24
    11ce:	d9 f3       	breq	.-10     	; 0x11c6 <getTransation+0x22>
		transation=START_EVENT;
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	08 95       	ret
/*   STATE MACHINE PROTOTYPES     */
/*                                */
/*--------------------------------*/
TRANSATION_t getTransation(void)
{
	TRANSATION_t transation=NO_TRANSATION;
    11d4:	88 e0       	ldi	r24, 0x08	; 8
		while(Dio_ReadPin(START_PB)==DIO_VOLT_LOW);
		transation=START_EVENT;
	}
	
	return transation;
}
    11d6:	08 95       	ret

000011d8 <getFoodTransation>:
TRANSATION_t  getFoodTransation(void)
{
	TRANSATION_t foodTransation=FOOD_WEIGHT_INVALID_EVENT;
	
	//check if is food exist
	if (Dio_ReadPin(WEIGHT_SENSOR)==DIO_VOLT_LOW) 
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Dio_ReadPin>
    11de:	81 11       	cpse	r24, r1
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <getFoodTransation+0xe>
	{
		foodTransation=FOOD_WEIGHT_VALID_EVENT;
    11e2:	84 e0       	ldi	r24, 0x04	; 4
    11e4:	08 95       	ret
	}
	else
	{
		foodTransation=FOOD_WEIGHT_INVALID_EVENT;
    11e6:	85 e0       	ldi	r24, 0x05	; 5
	}
	return foodTransation;
}
    11e8:	08 95       	ret

000011ea <getTimeTransation>:
{
	TRANSATION_t timeTransation=TIME_ADJUSTED_EVENT;
	
	u16 min=0,sec=0;
	
	if (secondTens>='6')
    11ea:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <secondTens>
    11ee:	86 33       	cpi	r24, 0x36	; 54
    11f0:	30 f0       	brcs	.+12     	; 0x11fe <getTimeTransation+0x14>
	{
		secondTens='6';
    11f2:	86 e3       	ldi	r24, 0x36	; 54
    11f4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <secondTens>
		secondUnits='0';
    11f8:	80 e3       	ldi	r24, 0x30	; 48
    11fa:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <secondUnits>
	-----------------------------------------------------------------
	EX:
	(minuteTens=1 ,minuteUnits=0, secondTens=4, secondUnits=0)  ===>  (10:40) ten minutes and fourty seconds
	
	*/
	min=((minuteTens-'0')*10)+(minuteUnits-'0');
    11fe:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <minuteTens>
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	c0 97       	sbiw	r24, 0x30	; 48
    1206:	9c 01       	movw	r18, r24
    1208:	22 0f       	add	r18, r18
    120a:	33 1f       	adc	r19, r19
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	82 0f       	add	r24, r18
    121a:	93 1f       	adc	r25, r19
    121c:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <minuteUnits>
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	40 53       	subi	r20, 0x30	; 48
    1224:	51 09       	sbc	r21, r1
    1226:	48 0f       	add	r20, r24
    1228:	59 1f       	adc	r21, r25
	sec=((secondTens-'0')*10)+(secondUnits-'0');
    122a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <secondTens>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	c0 97       	sbiw	r24, 0x30	; 48
    1232:	9c 01       	movw	r18, r24
    1234:	22 0f       	add	r18, r18
    1236:	33 1f       	adc	r19, r19
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	82 0f       	add	r24, r18
    1246:	93 1f       	adc	r25, r19
    1248:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <secondUnits>
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	20 53       	subi	r18, 0x30	; 48
    1250:	31 09       	sbc	r19, r1
    1252:	28 0f       	add	r18, r24
    1254:	39 1f       	adc	r19, r25
	opTime=((u16)min*60)+sec;
    1256:	6c e3       	ldi	r22, 0x3C	; 60
    1258:	64 9f       	mul	r22, r20
    125a:	c0 01       	movw	r24, r0
    125c:	65 9f       	mul	r22, r21
    125e:	90 0d       	add	r25, r0
    1260:	11 24       	eor	r1, r1
    1262:	82 0f       	add	r24, r18
    1264:	93 1f       	adc	r25, r19
    1266:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <opTime+0x1>
    126a:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <opTime>
	
	if (opTime>0)
    126e:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <opTime>
    1272:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <opTime+0x1>
    1276:	89 2b       	or	r24, r25
    1278:	11 f0       	breq	.+4      	; 0x127e <getTimeTransation+0x94>
	{
		timeTransation=TIME_ADJUSTED_EVENT;
    127a:	86 e0       	ldi	r24, 0x06	; 6
    127c:	08 95       	ret
	} 
	else
	{
		timeTransation=TIME_NOT_ADJUSTED_EVENT;
    127e:	87 e0       	ldi	r24, 0x07	; 7
	}
	return timeTransation;
}
    1280:	08 95       	ret

00001282 <getTimeUpdate>:
Std_Status_t  getTimeUpdate(void)
{
	Std_Status_t status=STD_PENDING;	
	if (opTime>0)
    1282:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <opTime>
    1286:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <opTime+0x1>
    128a:	89 2b       	or	r24, r25
    128c:	11 f0       	breq	.+4      	; 0x1292 <getTimeUpdate+0x10>
	{
		status=STD_PENDING;
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	08 95       	ret
	}
	else
	{
		status=STD_DONE;
    1292:	82 e0       	ldi	r24, 0x02	; 2
	}
	return status;
}
    1294:	08 95       	ret

00001296 <resetTimer>:

void resetTimer(void)
{
	secondUnits='0';
    1296:	80 e3       	ldi	r24, 0x30	; 48
    1298:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <secondUnits>
	secondTens='0';
    129c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <secondTens>
	minuteUnits='0';
    12a0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <minuteUnits>
	minuteTens='0';
    12a4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <minuteTens>
	opTime=0;
    12a8:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <opTime+0x1>
    12ac:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <opTime>
    12b0:	08 95       	ret

000012b2 <keyPad_read>:
}
void keyPad_read(void)
{
	if(KEYPAD_GetKey(&keypad_read_var)==STD_OK)
    12b2:	88 ee       	ldi	r24, 0xE8	; 232
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 2a 04 	call	0x854	; 0x854 <KEYPAD_GetKey>
    12ba:	81 11       	cpse	r24, r1
    12bc:	13 c0       	rjmp	.+38     	; 0x12e4 <keyPad_read+0x32>
	{
		isDisplayUpdateNeeded=STD_TRUE;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <isDisplayUpdateNeeded>
		
		minuteTens=minuteUnits;
    12c4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <minuteUnits>
    12c8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <minuteTens>
		minuteUnits=secondTens;
    12cc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <secondTens>
    12d0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <minuteUnits>
		secondTens=secondUnits;
    12d4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <secondUnits>
    12d8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <secondTens>
		secondUnits=keypad_read_var;
    12dc:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <keypad_read_var>
    12e0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <secondUnits>
    12e4:	08 95       	ret

000012e6 <main>:
int main(void)
{
	/************************************************************************/
	/*                           Initialization                             */
	/************************************************************************/
	system_init();
    12e6:	0e 94 8b 08 	call	0x1116	; 0x1116 <system_init>

	while (1) /*< Super_Loop */
	{
		transation=getTransation();
    12ea:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <getTransation>
    12ee:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <transation>
			
		switch (currentState)
    12f2:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <currentState>
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	d1 f1       	breq	.+116    	; 0x136e <main+0x88>
    12fa:	20 f0       	brcs	.+8      	; 0x1304 <main+0x1e>
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	09 f4       	brne	.+2      	; 0x1302 <main+0x1c>
    1300:	83 c0       	rjmp	.+262    	; 0x1408 <main+0x122>
    1302:	f3 cf       	rjmp	.-26     	; 0x12ea <main+0x4>
		{
			/***************************************************/
			/*                IDLE_OFF_STATE                   */
			/***************************************************/
			case IDLE_OFF_STATE:
				keyPad_read();
    1304:	0e 94 59 09 	call	0x12b2	; 0x12b2 <keyPad_read>
				display_update(DISPLAY_SET_TIMER_PLEASE);
    1308:	85 e0       	ldi	r24, 0x05	; 5
    130a:	0e 94 70 07 	call	0xee0	; 0xee0 <display_update>
				
				switch (transation)
    130e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <transation>
    1312:	88 23       	and	r24, r24
    1314:	19 f0       	breq	.+6      	; 0x131c <main+0x36>
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	11 f1       	breq	.+68     	; 0x135e <main+0x78>
    131a:	e7 cf       	rjmp	.-50     	; 0x12ea <main+0x4>
				{
					case START_EVENT:
						if (Dio_ReadPin(DOOR_SENSOR)==DIO_VOLT_HIGH) /*< check if door is opened*/
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Dio_ReadPin>
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	21 f4       	brne	.+8      	; 0x132e <main+0x48>
						{
							display_update(DISPLAY_DOOR_OPENED);	
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	0e 94 70 07 	call	0xee0	; 0xee0 <display_update>
    132c:	de cf       	rjmp	.-68     	; 0x12ea <main+0x4>
						}
						else if (getFoodTransation()==FOOD_WEIGHT_INVALID_EVENT) /*< check if no food exist */
    132e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <getFoodTransation>
    1332:	85 30       	cpi	r24, 0x05	; 5
    1334:	21 f4       	brne	.+8      	; 0x133e <main+0x58>
						{
							display_update(DISPLAY_PUT_FOOD);
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	0e 94 70 07 	call	0xee0	; 0xee0 <display_update>
    133c:	d6 cf       	rjmp	.-84     	; 0x12ea <main+0x4>
						} 
						else if (getTimeTransation()==TIME_NOT_ADJUSTED_EVENT) /*< check if Timer not adjusted */
    133e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <getTimeTransation>
    1342:	87 30       	cpi	r24, 0x07	; 7
    1344:	21 f4       	brne	.+8      	; 0x134e <main+0x68>
						{
							display_update(DISPLAY_TIMER_NOT_ADJUSTED);
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	0e 94 70 07 	call	0xee0	; 0xee0 <display_update>
    134c:	ce cf       	rjmp	.-100    	; 0x12ea <main+0x4>
						} 
						else /*< the system ready to run */
						{
							currentState=ON_STATE; /*< switch the current state to the state should be executed */
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <currentState>
							isDisplayUpdateNeeded=STD_TRUE; /*< changing this flag to true indicate that the display_update() function must update the LCD*/
    1354:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <isDisplayUpdateNeeded>
							historyState=IDLE_OFF_STATE;   /*< store the history state is needed for system_OnOff() function*/
    1358:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <historyState>
    135c:	c6 cf       	rjmp	.-116    	; 0x12ea <main+0x4>
						}
					break;
			
					case CANCEL_EVENT:
						display_update(DISPLAY_RESET);
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	0e 94 70 07 	call	0xee0	; 0xee0 <display_update>
						resetTimer();
    1364:	0e 94 4b 09 	call	0x1296	; 0x1296 <resetTimer>
						currentState=IDLE_OFF_STATE; /*< switch the current state to the state should be executed */
    1368:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <currentState>
					break;	
    136c:	be cf       	rjmp	.-132    	; 0x12ea <main+0x4>
			   
			   /* moved in else to avoid print running and run for a while before check and result of check is goto paused state
				display_update(DISPLAY_RUNNING);
				system_OnOff(STD_ON);
			    */
				if (Dio_ReadPin(DOOR_SENSOR)==DIO_VOLT_HIGH)//opened
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Dio_ReadPin>
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	69 f4       	brne	.+26     	; 0x1392 <main+0xac>
				{
					system_OnOff(STD_OFF); /*< switch OFF the system to because next state is paused state*/
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	0e 94 56 08 	call	0x10ac	; 0x10ac <system_OnOff>
					display_update(DISPLAY_DOOR_OPENED);
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	0e 94 70 07 	call	0xee0	; 0xee0 <display_update>
					currentState=PAUSE_STATE; /*< switch the current state to the state should be executed */
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <currentState>
					isDisplayUpdateNeeded=STD_TRUE; /*< changing this flag to true indicate that the display_update() function must update the LCD*/
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <isDisplayUpdateNeeded>
    1390:	26 c0       	rjmp	.+76     	; 0x13de <main+0xf8>
				}
				else if (getFoodTransation()==FOOD_WEIGHT_INVALID_EVENT)
    1392:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <getFoodTransation>
    1396:	85 30       	cpi	r24, 0x05	; 5
    1398:	69 f4       	brne	.+26     	; 0x13b4 <main+0xce>
				{
					system_OnOff(STD_OFF); /*< switch OFF the system to because next state is paused state*/
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	0e 94 56 08 	call	0x10ac	; 0x10ac <system_OnOff>
					display_update(DISPLAY_PUT_FOOD); 
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	0e 94 70 07 	call	0xee0	; 0xee0 <display_update>
					currentState=PAUSE_STATE; /*< switch the current state to the state should be executed */
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <currentState>
					isDisplayUpdateNeeded=STD_TRUE; /*< changing this flag to true indicate that the display_update() function must update the LCD*/
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <isDisplayUpdateNeeded>
    13b2:	15 c0       	rjmp	.+42     	; 0x13de <main+0xf8>
				}
				else if (getTimeUpdate()==STD_DONE) /*< timer is counting down to zero */
    13b4:	0e 94 41 09 	call	0x1282	; 0x1282 <getTimeUpdate>
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	59 f4       	brne	.+22     	; 0x13d2 <main+0xec>
				{
					system_OnOff(STD_OFF); /*< switch OFF the system to because next state is paused state*/
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	0e 94 56 08 	call	0x10ac	; 0x10ac <system_OnOff>
					display_update(DISPLAY_DONE);
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	0e 94 70 07 	call	0xee0	; 0xee0 <display_update>
					currentState=IDLE_OFF_STATE; /*< switch the current state to the state should be executed */
    13c8:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <currentState>
					resetTimer();
    13cc:	0e 94 4b 09 	call	0x1296	; 0x1296 <resetTimer>
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <main+0xf8>
				}
				else
				{
					// new commit 
					display_update(DISPLAY_RUNNING);
    13d2:	86 e0       	ldi	r24, 0x06	; 6
    13d4:	0e 94 70 07 	call	0xee0	; 0xee0 <display_update>
					system_OnOff(STD_ON);
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	0e 94 56 08 	call	0x10ac	; 0x10ac <system_OnOff>
				}
				
				
				switch (transation)
    13de:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <transation>
    13e2:	88 23       	and	r24, r24
    13e4:	19 f0       	breq	.+6      	; 0x13ec <main+0x106>
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <main+0x10e>
    13ea:	7f cf       	rjmp	.-258    	; 0x12ea <main+0x4>
				{
					case START_EVENT:
						currentState=ON_STATE;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <currentState>
					break;
    13f2:	7b cf       	rjmp	.-266    	; 0x12ea <main+0x4>
					
					case CANCEL_EVENT:
						system_OnOff(STD_OFF); /*< switch OFF the system to because next state is paused state*/
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	0e 94 56 08 	call	0x10ac	; 0x10ac <system_OnOff>
						currentState=PAUSE_STATE;/*< switch the current state to the state should be executed */
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <currentState>
						isDisplayUpdateNeeded=STD_TRUE; /*< changing this flag to true indicate that the display_update() function must update the LCD*/
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <isDisplayUpdateNeeded>
					break;
    1406:	71 cf       	rjmp	.-286    	; 0x12ea <main+0x4>
					break;
				}				
			break;
			
			case PAUSE_STATE:	
				display_update(DISPLAY_PAUSED);
    1408:	87 e0       	ldi	r24, 0x07	; 7
    140a:	0e 94 70 07 	call	0xee0	; 0xee0 <display_update>
				switch (transation)
    140e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <transation>
    1412:	88 23       	and	r24, r24
    1414:	19 f0       	breq	.+6      	; 0x141c <main+0x136>
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	51 f0       	breq	.+20     	; 0x142e <main+0x148>
    141a:	67 cf       	rjmp	.-306    	; 0x12ea <main+0x4>
				{
					case START_EVENT: 
						currentState=ON_STATE;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <currentState>
						historyState=PAUSE_STATE;
    1422:	92 e0       	ldi	r25, 0x02	; 2
    1424:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <historyState>
						isDisplayUpdateNeeded=STD_TRUE; /*< changing this flag to true indicate that the display_update() function must update the LCD*/
    1428:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <isDisplayUpdateNeeded>
					break;
    142c:	5e cf       	rjmp	.-324    	; 0x12ea <main+0x4>
					
					case CANCEL_EVENT:
						display_update(DISPLAY_RESET);
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	0e 94 70 07 	call	0xee0	; 0xee0 <display_update>
						resetTimer();
    1434:	0e 94 4b 09 	call	0x1296	; 0x1296 <resetTimer>
						currentState=IDLE_OFF_STATE; /*< switch the current state to the state should be executed */
    1438:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <currentState>
					break;
    143c:	56 cf       	rjmp	.-340    	; 0x12ea <main+0x4>

0000143e <Dio_SetPinDirection>:
 *        - DIO_PIN_DIRECTION_OUTPUT: Sets the pin as output.
 *        - DIO_PIN_DIRECTION_INPUT_FREE: Sets the pin as input with high impedance (free).
 *        - DIO_PIN_DIRECTION_INPUT_PULLUP: Sets the pin as input with pull-up resistor enabled.
 */
static void Dio_SetPinDirection(const DIO_PIN_t pin,const DIO_PIN_DIRECTION_t direction)
{
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	60 97       	sbiw	r28, 0x10	; 16
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
	volatile u8 *arrOf_DDR[]={&DDRA,&DDRB,&DDRC,&DDRD}; // Array of DDR registers for each port
    1452:	98 e0       	ldi	r25, 0x08	; 8
    1454:	e8 e7       	ldi	r30, 0x78	; 120
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	de 01       	movw	r26, r28
    145a:	11 96       	adiw	r26, 0x01	; 1
    145c:	01 90       	ld	r0, Z+
    145e:	0d 92       	st	X+, r0
    1460:	9a 95       	dec	r25
    1462:	e1 f7       	brne	.-8      	; 0x145c <Dio_SetPinDirection+0x1e>
	volatile u8 *arrOf_PORT[]={&PORTA,&PORTB,&PORTC,&PORTD}; // Array of PORT registers for each port
    1464:	98 e0       	ldi	r25, 0x08	; 8
    1466:	e0 e8       	ldi	r30, 0x80	; 128
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	de 01       	movw	r26, r28
    146c:	19 96       	adiw	r26, 0x09	; 9
    146e:	01 90       	ld	r0, Z+
    1470:	0d 92       	st	X+, r0
    1472:	9a 95       	dec	r25
    1474:	e1 f7       	brne	.-8      	; 0x146e <Dio_SetPinDirection+0x30>
	
	switch(direction)
    1476:	61 30       	cpi	r22, 0x01	; 1
    1478:	51 f1       	breq	.+84     	; 0x14ce <Dio_SetPinDirection+0x90>
    147a:	20 f0       	brcs	.+8      	; 0x1484 <Dio_SetPinDirection+0x46>
    147c:	62 30       	cpi	r22, 0x02	; 2
    147e:	09 f4       	brne	.+2      	; 0x1482 <Dio_SetPinDirection+0x44>
    1480:	4b c0       	rjmp	.+150    	; 0x1518 <Dio_SetPinDirection+0xda>
    1482:	6e c0       	rjmp	.+220    	; 0x1560 <Dio_SetPinDirection+0x122>
	{
		case DIO_PIN_DIRECTION_OUTPUT:
			set_bit(*arrOf_DDR[pin/8], pin%8);    // Set the pin as output
    1484:	e8 2f       	mov	r30, r24
    1486:	e6 95       	lsr	r30
    1488:	e6 95       	lsr	r30
    148a:	e6 95       	lsr	r30
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	2c 0f       	add	r18, r28
    1498:	3d 1f       	adc	r19, r29
    149a:	e2 0f       	add	r30, r18
    149c:	f3 1f       	adc	r31, r19
    149e:	a0 81       	ld	r26, Z
    14a0:	b1 81       	ldd	r27, Z+1	; 0x01
    14a2:	4c 91       	ld	r20, X
    14a4:	87 70       	andi	r24, 0x07	; 7
    14a6:	21 e0       	ldi	r18, 0x01	; 1
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	b9 01       	movw	r22, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <Dio_SetPinDirection+0x74>
    14ae:	66 0f       	add	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	8a 95       	dec	r24
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <Dio_SetPinDirection+0x70>
    14b6:	cb 01       	movw	r24, r22
    14b8:	94 2f       	mov	r25, r20
    14ba:	98 2b       	or	r25, r24
    14bc:	9c 93       	st	X, r25
			clear_bit(*arrOf_PORT[pin/8],pin%8);   // Set the pin voltage to LOW
    14be:	00 84       	ldd	r0, Z+8	; 0x08
    14c0:	f1 85       	ldd	r31, Z+9	; 0x09
    14c2:	e0 2d       	mov	r30, r0
    14c4:	90 81       	ld	r25, Z
    14c6:	80 95       	com	r24
    14c8:	89 23       	and	r24, r25
    14ca:	80 83       	st	Z, r24
			break;
    14cc:	49 c0       	rjmp	.+146    	; 0x1560 <Dio_SetPinDirection+0x122>
		
		case DIO_PIN_DIRECTION_INPUT_FREE:
			clear_bit(*arrOf_DDR[pin/8], pin%8);    // Set the pin as input
    14ce:	e8 2f       	mov	r30, r24
    14d0:	e6 95       	lsr	r30
    14d2:	e6 95       	lsr	r30
    14d4:	e6 95       	lsr	r30
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	2c 0f       	add	r18, r28
    14e2:	3d 1f       	adc	r19, r29
    14e4:	e2 0f       	add	r30, r18
    14e6:	f3 1f       	adc	r31, r19
    14e8:	a0 81       	ld	r26, Z
    14ea:	b1 81       	ldd	r27, Z+1	; 0x01
    14ec:	4c 91       	ld	r20, X
    14ee:	87 70       	andi	r24, 0x07	; 7
    14f0:	21 e0       	ldi	r18, 0x01	; 1
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	b9 01       	movw	r22, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <Dio_SetPinDirection+0xbe>
    14f8:	66 0f       	add	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	8a 95       	dec	r24
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <Dio_SetPinDirection+0xba>
    1500:	cb 01       	movw	r24, r22
    1502:	80 95       	com	r24
    1504:	94 2f       	mov	r25, r20
    1506:	98 23       	and	r25, r24
    1508:	9c 93       	st	X, r25
			clear_bit(*arrOf_PORT[pin/8],pin%8);   // Set the input as INFREE
    150a:	00 84       	ldd	r0, Z+8	; 0x08
    150c:	f1 85       	ldd	r31, Z+9	; 0x09
    150e:	e0 2d       	mov	r30, r0
    1510:	90 81       	ld	r25, Z
    1512:	89 23       	and	r24, r25
    1514:	80 83       	st	Z, r24
			break;
    1516:	24 c0       	rjmp	.+72     	; 0x1560 <Dio_SetPinDirection+0x122>
		
		case DIO_PIN_DIRECTION_INPUT_PULLUP:
			clear_bit(*arrOf_DDR[pin/8], pin%8);    // Set the pin as input
    1518:	e8 2f       	mov	r30, r24
    151a:	e6 95       	lsr	r30
    151c:	e6 95       	lsr	r30
    151e:	e6 95       	lsr	r30
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	21 e0       	ldi	r18, 0x01	; 1
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	2c 0f       	add	r18, r28
    152c:	3d 1f       	adc	r19, r29
    152e:	e2 0f       	add	r30, r18
    1530:	f3 1f       	adc	r31, r19
    1532:	a0 81       	ld	r26, Z
    1534:	b1 81       	ldd	r27, Z+1	; 0x01
    1536:	4c 91       	ld	r20, X
    1538:	87 70       	andi	r24, 0x07	; 7
    153a:	21 e0       	ldi	r18, 0x01	; 1
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	b9 01       	movw	r22, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <Dio_SetPinDirection+0x108>
    1542:	66 0f       	add	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	8a 95       	dec	r24
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <Dio_SetPinDirection+0x104>
    154a:	cb 01       	movw	r24, r22
    154c:	96 2f       	mov	r25, r22
    154e:	90 95       	com	r25
    1550:	94 23       	and	r25, r20
    1552:	9c 93       	st	X, r25
			set_bit(*arrOf_PORT[pin/8],pin%8);   // Set the input as INPULLUP
    1554:	00 84       	ldd	r0, Z+8	; 0x08
    1556:	f1 85       	ldd	r31, Z+9	; 0x09
    1558:	e0 2d       	mov	r30, r0
    155a:	90 81       	ld	r25, Z
    155c:	89 2b       	or	r24, r25
    155e:	80 83       	st	Z, r24
			break;
	}
}
    1560:	60 96       	adiw	r28, 0x10	; 16
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <Dio_Init>:
 * 
 * @param None
 * @return None
 */
void Dio_Init(void)
{
    1572:	cf 93       	push	r28
	DIO_PIN_t i;
	for (i = PA0; i < DIO_TOTAL_PINS; i++)
    1574:	c0 e0       	ldi	r28, 0x00	; 0
    1576:	09 c0       	rjmp	.+18     	; 0x158a <Dio_Init+0x18>
	{
		Dio_SetPinDirection(i, arrOfPinsStatus[i]);
    1578:	ec 2f       	mov	r30, r28
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	e7 55       	subi	r30, 0x57	; 87
    157e:	fe 4f       	sbci	r31, 0xFE	; 254
    1580:	60 81       	ld	r22, Z
    1582:	8c 2f       	mov	r24, r28
    1584:	0e 94 1f 0a 	call	0x143e	; 0x143e <Dio_SetPinDirection>
 * @return None
 */
void Dio_Init(void)
{
	DIO_PIN_t i;
	for (i = PA0; i < DIO_TOTAL_PINS; i++)
    1588:	cf 5f       	subi	r28, 0xFF	; 255
    158a:	c0 32       	cpi	r28, 0x20	; 32
    158c:	a8 f3       	brcs	.-22     	; 0x1578 <Dio_Init+0x6>
	{
		Dio_SetPinDirection(i, arrOfPinsStatus[i]);
	}
}
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <Dio_ReadPin>:
 *
 * @param pin The pin number to read the voltage level from.
 * @return The voltage level of the pin (DIO_VOLT_HIGH or DIO_VOLT_LOW).
 */
DIO_VOLTAGE_LEVEL_t Dio_ReadPin(const DIO_PIN_t pin)
{
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	28 97       	sbiw	r28, 0x08	; 8
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
	volatile u8 *arrOf_PIN[] = {&PINA, &PINB, &PINC, &PIND}; /**< Array of PIN registers for each port */
    15a6:	98 e0       	ldi	r25, 0x08	; 8
    15a8:	e8 e8       	ldi	r30, 0x88	; 136
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	de 01       	movw	r26, r28
    15ae:	11 96       	adiw	r26, 0x01	; 1
    15b0:	01 90       	ld	r0, Z+
    15b2:	0d 92       	st	X+, r0
    15b4:	9a 95       	dec	r25
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <Dio_ReadPin+0x1e>
	DIO_VOLTAGE_LEVEL_t voltage = DIO_VOLT_LOW; /**< Initialize voltage variable with DIO_VOLT_LOW */
	voltage = get_bit(*arrOf_PIN[pin / 8], pin % 8); /**< Read the voltage level of the specified pin */
    15b8:	e8 2f       	mov	r30, r24
    15ba:	e6 95       	lsr	r30
    15bc:	e6 95       	lsr	r30
    15be:	e6 95       	lsr	r30
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	21 e0       	ldi	r18, 0x01	; 1
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	2c 0f       	add	r18, r28
    15cc:	3d 1f       	adc	r19, r29
    15ce:	e2 0f       	add	r30, r18
    15d0:	f3 1f       	adc	r31, r19
    15d2:	01 90       	ld	r0, Z+
    15d4:	f0 81       	ld	r31, Z
    15d6:	e0 2d       	mov	r30, r0
    15d8:	90 81       	ld	r25, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	27 70       	andi	r18, 0x07	; 7
    15de:	89 2f       	mov	r24, r25
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <Dio_ReadPin+0x56>
    15e4:	95 95       	asr	r25
    15e6:	87 95       	ror	r24
    15e8:	2a 95       	dec	r18
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <Dio_ReadPin+0x52>
	return voltage; /**< Return the voltage level of the pin */
}
    15ec:	81 70       	andi	r24, 0x01	; 1
    15ee:	28 96       	adiw	r28, 0x08	; 8
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret

00001600 <Dio_WritePin>:
 * @param volt The voltage level to be set (HIGH or LOW).
 *
 * @return None.
 */
void Dio_WritePin(const DIO_PIN_t pin, const DIO_VOLTAGE_LEVEL_t volt)
{
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	28 97       	sbiw	r28, 0x08	; 8
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
	volatile u8 *arrOf_PORT[]={&PORTA,&PORTB,&PORTC,&PORTD};
    1614:	98 e0       	ldi	r25, 0x08	; 8
    1616:	e0 e8       	ldi	r30, 0x80	; 128
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	de 01       	movw	r26, r28
    161c:	11 96       	adiw	r26, 0x01	; 1
    161e:	01 90       	ld	r0, Z+
    1620:	0d 92       	st	X+, r0
    1622:	9a 95       	dec	r25
    1624:	e1 f7       	brne	.-8      	; 0x161e <Dio_WritePin+0x1e>
	write_bit(*arrOf_PORT[pin/8],pin%8,volt); /**< Set the voltage level of the specified pin */
    1626:	e8 2f       	mov	r30, r24
    1628:	e6 95       	lsr	r30
    162a:	e6 95       	lsr	r30
    162c:	e6 95       	lsr	r30
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	ee 0f       	add	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	21 e0       	ldi	r18, 0x01	; 1
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	2c 0f       	add	r18, r28
    163a:	3d 1f       	adc	r19, r29
    163c:	e2 0f       	add	r30, r18
    163e:	f3 1f       	adc	r31, r19
    1640:	01 90       	ld	r0, Z+
    1642:	f0 81       	ld	r31, Z
    1644:	e0 2d       	mov	r30, r0
    1646:	90 81       	ld	r25, Z
    1648:	87 70       	andi	r24, 0x07	; 7
    164a:	21 e0       	ldi	r18, 0x01	; 1
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	08 2e       	mov	r0, r24
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <Dio_WritePin+0x56>
    1652:	22 0f       	add	r18, r18
    1654:	33 1f       	adc	r19, r19
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <Dio_WritePin+0x52>
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <Dio_WritePin+0x62>
    165e:	66 0f       	add	r22, r22
    1660:	77 1f       	adc	r23, r23
    1662:	8a 95       	dec	r24
    1664:	e2 f7       	brpl	.-8      	; 0x165e <Dio_WritePin+0x5e>
    1666:	20 95       	com	r18
    1668:	29 23       	and	r18, r25
    166a:	62 2b       	or	r22, r18
    166c:	60 83       	st	Z, r22
}
    166e:	28 96       	adiw	r28, 0x08	; 8
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <__tablejump2__>:
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	05 90       	lpm	r0, Z+
    1686:	f4 91       	lpm	r31, Z
    1688:	e0 2d       	mov	r30, r0
    168a:	09 94       	ijmp

0000168c <__umulhisi3>:
    168c:	a2 9f       	mul	r26, r18
    168e:	b0 01       	movw	r22, r0
    1690:	b3 9f       	mul	r27, r19
    1692:	c0 01       	movw	r24, r0
    1694:	a3 9f       	mul	r26, r19
    1696:	70 0d       	add	r23, r0
    1698:	81 1d       	adc	r24, r1
    169a:	11 24       	eor	r1, r1
    169c:	91 1d       	adc	r25, r1
    169e:	b2 9f       	mul	r27, r18
    16a0:	70 0d       	add	r23, r0
    16a2:	81 1d       	adc	r24, r1
    16a4:	11 24       	eor	r1, r1
    16a6:	91 1d       	adc	r25, r1
    16a8:	08 95       	ret

000016aa <_exit>:
    16aa:	f8 94       	cli

000016ac <__stop_program>:
    16ac:	ff cf       	rjmp	.-2      	; 0x16ac <__stop_program>
